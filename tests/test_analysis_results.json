{
  "total_directories": 286,
  "directories_with_yaml": 34,
  "total_yaml_files": 610,
  "total_target_files": 2717,
  "language_distribution": {},
  "test_type_distribution": {
    "other": 264,
    "taint_analysis": 3,
    "parsing": 8,
    "pattern_matching": 2,
    "rules": 8,
    "autofix": 1
  },
  "directory_details": {
    "misc/dataflow": {
      "yaml_files": [],
      "target_files": [
        "mult.py",
        "tainting.py",
        "reaching.py",
        "liveness.py",
        "while.py",
        "big-mult.py",
        "div-by-zero.py"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "misc/equivalences": {
      "yaml_files": [],
      "target_files": [
        "test.py"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "misc/naming": {
      "yaml_files": [
        "scope_python.yml",
        "inside.yaml"
      ],
      "target_files": [
        "inside.py",
        "scope_basic.py",
        "scope_python.py",
        "scope_python.yml",
        "inside.yaml"
      ],
      "yaml_count": 2,
      "target_count": 5
    },
    "misc/skipping_errors": {
      "yaml_files": [],
      "target_files": [
        "test.js"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "misc/il": {
      "yaml_files": [],
      "target_files": [
        "lambda.js",
        "assignop.c",
        "cond.c",
        "incr_decr.c",
        "assert.py",
        "container.py",
        "array.js",
        "foreach.py",
        "while.py",
        "var.py",
        "dot.js",
        "basic.py",
        "for.c",
        "seq.c",
        "call.py",
        "var.js",
        "goto.c",
        "dowhile.js",
        "if.py"
      ],
      "yaml_count": 0,
      "target_count": 19
    },
    "misc/experimental_diff": {
      "yaml_files": [
        "typed_metavars.yaml",
        "array_access.yaml"
      ],
      "target_files": [
        "typed_metavars.yaml",
        "array_access.yaml"
      ],
      "yaml_count": 2,
      "target_count": 2
    },
    "misc/controlflow": {
      "yaml_files": [],
      "target_files": [
        "while.py",
        "if.php",
        "goto.c",
        "if.py"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "misc/tainting": {
      "yaml_files": [],
      "target_files": [
        "tainting.py",
        "hello_world.java",
        "tainting2.py",
        "simple.java"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "parsing_errors": {
      "yaml_files": [],
      "target_files": [
        "err.ts",
        "foo.c",
        "unbalanced_brace.py",
        "skip_tokens.ts"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "explanations": {
      "yaml_files": [
        "explain_taint.yaml",
        "explain_basic.yaml",
        "explain_negation.yaml",
        "explain_subpatterns.yaml",
        "explain_metavar_cond.yaml",
        "explain_focus.yaml"
      ],
      "target_files": [
        "explain_taint.yaml",
        "explain_basic.yaml",
        "explain_taint.py",
        "explain_negation.yaml",
        "explain_subpatterns.yaml",
        "explain_metavar_cond.yaml",
        "explain_negation.py",
        "explain_basic.py",
        "explain_subpatterns.py",
        "explain_focus.py",
        "explain_metavar_cond.py",
        "explain_focus.yaml"
      ],
      "yaml_count": 6,
      "target_count": 12
    },
    "semgrep_output/cli_output": {
      "yaml_files": [],
      "target_files": [
        "timing.json",
        "rule_id_and_spans.json",
        "cli_output1.json",
        "skipped.json",
        "fix_regexp.json",
        "invalid_rule.json",
        "dependency_aware.json"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "semgrep_output/scans_output": {
      "yaml_files": [],
      "target_files": [
        "findings.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "semgrep_output/core_output": {
      "yaml_files": [],
      "target_files": [
        "core_output1.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns": {
      "yaml_files": [],
      "target_files": [
        "cp_exception.py"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/terraform": {
      "yaml_files": [],
      "target_files": [
        "dots_args.tf",
        "dots_objects.tf",
        "metavar_arg.tf",
        "dots_string.tf",
        "dots_top.tf",
        "anonymous_metavar.tf",
        "equivalence_constant_propagation.tf",
        "equivalence_constant_propagation2.tf",
        "deep_expr_operator.tf",
        "concrete_syntax.tf",
        "dots_fields.tf",
        "metavar_equality_var.tf",
        "metavar_call.tf",
        "dots_resource.tf"
      ],
      "yaml_count": 0,
      "target_count": 14
    },
    "patterns/go": {
      "yaml_files": [],
      "target_files": [
        "dots_stmts3.go",
        "metavar_call.go",
        "misc_assignop.go",
        "deep_exprstmt.go",
        "dots_function_type.go",
        "misc_functype_0arg.go",
        "dots_package.go",
        "metavar-typing-structs-and-new.go",
        "typing-make.go",
        "dots_for.go",
        "metavar_typed.go",
        "make-args-trans.go",
        "equivalence_naming_import2.go",
        "partial_single_field2.go",
        "dots_attributes.go",
        "misc_cast_autofix.go",
        "import_metavar2.go",
        "misc_import.go",
        "deep_cond.go",
        "partial_function.go",
        "metavar_expr.go",
        "misc_empty_body.go",
        "metavar_equality_expr.go",
        "dots_stmts2.go",
        "dots_newargs.go",
        "metavar_typed_args.go",
        "dots_switch_cases.go",
        "dots_stmts.go",
        "partial_single_field.go",
        "misc_regression1.go",
        "dots_import.go",
        "imports.go",
        "equivalence_constant_propagation.go",
        "package_metavar.go",
        "anonymous_metavar.go",
        "regexp_caret.go",
        "deep_expr_lambda.go",
        "metavar_ellipsis_stmts.go",
        "metavar_ellipsis_args.go",
        "struct_tags_one.go",
        "string_literals.go",
        "metavar_cond.go",
        "dots_params.go",
        "make_tri_pat.go",
        "dots_nested_stmts.go",
        "dots_stmts2.newline.go",
        "equivalence_interpolated_str.go",
        "make_ellipsis_firstarg.go",
        "multiple_metavars.go",
        "metavar_package.go",
        "dots_struct_order.go",
        "deep_expr_operator.go",
        "dots_method_chaining.go",
        "regexp_import.go",
        "misc_noteq.go",
        "misc_package.go",
        "import_metavar.go",
        "metavar_equality_var.go",
        "metavar_typed_lefthand.go",
        "concrete_syntax.go",
        "struct_tags.go",
        "dots_string.go",
        "misc_exprstmt_vs_expr.go",
        "metavar_stmt.go",
        "dots_expr.go",
        "misc_functype_0arg_bis.go",
        "misc_diff_pfff_treesitter.go",
        "misc_interface_method.go",
        "partial_initbraces.go",
        "metavar_equality_stmt.go",
        "cp_shortassign.go",
        "metavar_type.go",
        "shortassign.go",
        "regexp_string.go",
        "misc_hidden_empty2.go",
        "misc_initkey.go",
        "misc_hidden_empty.go",
        "dots_select_cases.go",
        "imports_prefix.go",
        "metavar_func_def.go",
        "misc_type_decl.go",
        "equivalence_naming_import1.go",
        "make_metavar_firstarg.go",
        "misc_compositelit.go",
        "dots_args.go",
        "interface_type_assertion.go",
        "equivalence_naming_import.go",
        "misc_tuple_order.go",
        "misc_import_order.go",
        "misc_ref_new.go",
        "metavar_typed_struct.go",
        "imports_metavar.go",
        "metavar_typed_literal.go",
        "cp_ref.go",
        "metavar_equality_vardef_vs_use.go",
        "dots_type_tuple.go",
        "metavar_arg.go",
        "metavar_key_value.go"
      ],
      "yaml_count": 0,
      "target_count": 98
    },
    "patterns/go/todo": {
      "yaml_files": [],
      "target_files": [
        "imports3.go"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/python": {
      "yaml_files": [],
      "target_files": [
        "dots_pattern_comprehension.py",
        "wildcard_qualified.py",
        "aliasing_attribute.py",
        "misc_comprehension.py",
        "misc_range_statements.py",
        "dots_stmts.py",
        "already_resolved_with_wildcard.py",
        "metavar_equality_expr.py",
        "dots_fstring.py",
        "set_vs_dict2.py",
        "assoc_matching_explosion3.py",
        "misc_class_regression.py",
        "concrete_fstring.py",
        "visitor_def.py",
        "misc_import.py",
        "equivalence_f_string_2.py",
        "scoped_wildcard.py",
        "deep_cond.py",
        "misc_dots_stmts.py",
        "dots_expr_plus_string.py",
        "import_negatives.py",
        "cp_python_mult_string.py",
        "python2.py",
        "assoc_matching_explosion2.py",
        "ac_matching_dots1.py",
        "metavar_typed.py",
        "equivalence_f_string_3.py",
        "assoc_matching_bug.py",
        "pip614-extended-decorator-grammer1.py",
        "metavar_tuple.py",
        "cp_label1.py",
        "dots_attribute.py",
        "ac_matching_mvars2.py",
        "import_negatives2.py",
        "misc_attributes.py",
        "metavar_dict.py",
        "metavar_equality_field_vs_var.py",
        "less_attributes.py",
        "metavar_anno_fqn.py",
        "ac_matching_dots.py",
        "df_input.py",
        "cp_rlval.py",
        "equivalence_interpolated_str2.py",
        "metavar_equality_param_vs_use.py",
        "metavar_anno.py",
        "metavar_pattern.py",
        "deep_exprstmt.py",
        "set_vs_dict3.py",
        "metavar_call.py",
        "dots_fields.py",
        "concrete_syntax.py",
        "dict_ellipsis.py",
        "cp_strings.py",
        "dots_method_chaining.py",
        "metavar_kwd_arg.py",
        "metavar_equality_var.py",
        "import_metavar.py",
        "assoc_matching_free1.py",
        "multiple_metavars.py",
        "misc_paren.py",
        "dots_tuples.py",
        "misc_metavar_field_anyorder.py",
        "deep_expr_operator.py",
        "cp_eval2.py",
        "misc_faketok1.py",
        "misc_metavar_vs_fstring.py",
        "import_metavar_fullpath.py",
        "equivalence_interpolated_str.py",
        "misc_prefix_string.py",
        "ac_matching_explosion1.py",
        "standalone_decorator.py",
        "assoc_matching_dots.py",
        "deep_fake_dataflow.py",
        "misc_with_parens.py",
        "dots_nested_stmts.py",
        "dots_params.py",
        "metavar_iterator.py",
        "misc_tuple2.py",
        "metavar_cond.py",
        "metavar_string.py",
        "static_method.py",
        "dots_list.py",
        "less_typehint.py",
        "constprop_used_twice.py",
        "metavar_ellipsis_args.py",
        "anonymous_metavar.py",
        "misc_encoded_string.py",
        "misc_regression1.py",
        "equivalence_constant_propagation.py",
        "ac_matching_mvars.py",
        "imports.py",
        "assoc_matching_mvars.py",
        "constprop_dataflow.py",
        "misc_stmts1.py",
        "misc_faketok3.py",
        "equivalence_keyword_args.py",
        "assoc_matching_free.py",
        "regexp_string.py",
        "parenthesized_with.py",
        "misc_naming_bug2.py",
        "ac_matching_explosion3.py",
        "less_inherits.py",
        "dots_return.py",
        "deep_try.py",
        "cp_python_mult_string1.py",
        "misc_regression2.py",
        "any_qualified_with_wildcard.py",
        "multi_qualified_wildcard.py",
        "misc_match_stmt.py",
        "metavar_equality_stmt.py",
        "dots_expr_plus.py",
        "set_vs_dict.py",
        "cp_yield.py",
        "metavar_import.py",
        "cp_exception.py",
        "ac_matching_free1.py",
        "misc_if1.py",
        "aliasing_and_direct.py",
        "cp_concat.py",
        "assoc_matching_explosion.py",
        "cp_eval1.py",
        "misc_faketok2.py",
        "dots_string.py",
        "ac_matching_if.py",
        "dots_expr.py",
        "metavar_stmt.py",
        "ac_matching_explosion2.py",
        "misc_with_no_rename.py",
        "less_catch_multiple.py",
        "misc_except_matching.py",
        "dots_except_as.py",
        "metavar_key_value.py",
        "assoc_matching_explosion1.py",
        "metavar_match.py",
        "ac_matching_explosion.py",
        "stmts_to_fields.py",
        "cp_label.py",
        "misc_else.py",
        "cp_string_mvar.py",
        "cp_method_call.py",
        "pip614-extended-decorator-grammer2.py",
        "regexp_string_backref.py",
        "ac_matching_mvars1.py",
        "metavar_arg.py",
        "equivalence_f_string.py",
        "ac_matching_free.py",
        "metavar_equality_funcdef_vs_use.py",
        "wildcard_qualified_mvar.py",
        "misc_return_empty.py",
        "index_tuple.py",
        "metavar_set.py",
        "equivalence_f_string_4.py",
        "metavar_class_def.py",
        "assoc_matching_dots1.py",
        "assoc_matching_mvars1.py",
        "less_catch.py",
        "less_typehint2.py",
        "misc_block_import.py",
        "deep_expr_vs_statement.py",
        "misc_exn.py",
        "cp_with.py",
        "ac_matching_if1.py",
        "equivalence_naming_import.py",
        "dots_inherit.py",
        "misc_tuple.py",
        "misc_naming_bug.py",
        "dots_args.py",
        "untyped_vs_typed.py",
        "metavar_func_def.py",
        "unordered_metavar2.py",
        "standalone_decorator_single_arg.py",
        "multi_import.py",
        "misc_fake_propa.py"
      ],
      "yaml_count": 0,
      "target_count": 173
    },
    "patterns/js": {
      "yaml_files": [],
      "target_files": [
        "dots_jsx_attr_list.js",
        "equivalence_constant_propagation3.js",
        "misc_semicolon.js",
        "cp_dataflow.js",
        "cp_incrdecr.js",
        "cp_undeclared1.js",
        "deep_expr_operator.js",
        "caching_nested.js",
        "dots_field_chaining.js",
        "misc_lambda.js",
        "dots_method_chaining.js",
        "metavar_import3.js",
        "dots_object.js",
        "metavar_equality_var.js",
        "deep_deep_stmt2.js",
        "misc_notoken.js",
        "unordered_metavar.js",
        "caching_deep_metavar.js",
        "concrete_syntax.js",
        "misc_asi_pattern.js",
        "metavar_template.js",
        "metavar_import2.js",
        "misc_method_chain_vs_stmt.js",
        "misc_method_brace_newline.js",
        "deep_deep_stmt3.js",
        "equivalence_constant_propagation.js",
        "partial_finally.js",
        "equivalence_import_require.js",
        "object_numeric_key.js",
        "less_xml_attr.js",
        "misc_arrow2.js",
        "misc_new.js",
        "infer_const_regexp.js",
        "anonymous_metavar.js",
        "misc_unicode.js",
        "metavar_ellipsis_args.js",
        "metavar_cond.js",
        "dots_params.js",
        "misc_export.js",
        "equivalence_constant_propagation2.js",
        "metavar_jsx_val.js",
        "cp_array_destructure.js",
        "infer_const.js",
        "dots_jsx_attr.js",
        "misc_null_cast.js",
        "misc_else_blocks_no_brace.js",
        "dots_nested_stmts.js",
        "deep_expr_and_ellipsis.js",
        "partial_decorators_arg_method.js",
        "less_class_complex_2.js",
        "metavar_stmt_or_expr.js",
        "cp_implicit_conversion.js",
        "misc_nested_field.js",
        "unordered_xml_attr.js",
        "deep_stmt3.js",
        "deep_cond.js",
        "misc_destructuring3.js",
        "partial_function.js",
        "misc_empty_body.js",
        "metavar_equality_expr.js",
        "ac_matching_bitor.js",
        "equivalence_import_variations2.js",
        "eval_call.js",
        "dots_stmts.js",
        "partial_single_field.js",
        "partial_if.js",
        "dots_container2.js",
        "metavar_call.js",
        "metavar_anno.js",
        "deep_exprstmt.js",
        "metavar_regexp.js",
        "equivalence_import_variations3.js",
        "metavar_importfrom.js",
        "caching_deep.js",
        "dots_for.js",
        "deep_stmt2.js",
        "misc_this.js",
        "misc_yield_undefined.js",
        "metavar_class_def.js",
        "deep_jsx.js",
        "dots_importfrom.js",
        "metavar_typed_literal.js",
        "dots_jsx_body2.js",
        "metavar_jsx_tag.js",
        "unordered_fields2.js",
        "misc_string.js",
        "metavar_equality_vardef_vs_use.js",
        "less_inheritance.js",
        "misc_tagged_template_literal.js",
        "misc_expr_vs_vardef.js",
        "misc_faketok.js",
        "cp_throw.js",
        "misc_foreach.js",
        "misc_catch_unbound.js",
        "partial_try.js",
        "metavar_arg.js",
        "metavar_key_value.js",
        "deep_expr_xml.js",
        "equivalence_aliasing_import.js",
        "deep_stmt.js",
        "misc_object_directly.js",
        "dots_string_no_interpolation.js",
        "equivalence_import_variations4.js",
        "cp_label.js",
        "metavar_importfrom2.js",
        "metavar_func_def.js",
        "cp_undeclared.js",
        "unordered_destructuring.js",
        "metavar_class_fields.js",
        "unordered_fields.js",
        "object_duplicate_key.js",
        "metavar_typed_bool.js",
        "aliasing_require.js",
        "dots_args.js",
        "metavar_jsx_attr.js",
        "deep_vardef.js",
        "partial_catch.js",
        "dots_regexp.js",
        "deep_expr_vs_statement.js",
        "misc_if_blocks_brace.js",
        "misc_else_blocks_brace.js",
        "cp_conditional.js",
        "misc_foreach1.js",
        "metavar_xml_attr.js",
        "misc_regexp_modifier.js",
        "regexp.js",
        "typed_metavar_assign.js",
        "regexp_fieldname.js",
        "equivalence_import_variations.js",
        "regexp_string.js",
        "infer_const_1.js",
        "misc_jsx_and_obj.js",
        "misc_if_blocks_no_brace.js",
        "switch_case_pattern.js",
        "dots_container.js",
        "misc_field_vs_vardef.js",
        "misc_destructuring_2.js",
        "ellipsis_metavar_tagged_template.js",
        "misc_arrow.js",
        "partial_class.js",
        "ellipsis_metavar_template.js",
        "misc_jsx.js",
        "equivalence_keyword_args.js",
        "dots_string.js",
        "misc_deep_expr_stmt.js",
        "misc_decorators_method.js",
        "metavar_stmt.js",
        "dots_expr.js",
        "partial_decorators_method.js",
        "misc_destructuring.js",
        "equivalence_varlet.js",
        "less_xml_body.js",
        "dots_template_literals.js",
        "caching_different_depth.js",
        "partial_lambda_or_func.js",
        "less_class_complex.js",
        "dots_object2.js",
        "deep_deep_stmt1.js",
        "dots_jsx_body.js",
        "template_string_w_metavar.js",
        "metavar_import.js",
        "caching_flat.js",
        "dots_pattern_record.js",
        "misc_metavar_with_digit.js",
        "metavar_equality_stmt.js"
      ],
      "yaml_count": 0,
      "target_count": 165
    },
    "patterns/dockerfile": {
      "yaml_files": [],
      "target_files": [
        "run-argv.dockerfile",
        "entrypoint.dockerfile",
        "metavar-backref.dockerfile",
        "copy-ellipsis.dockerfile",
        "from.dockerfile",
        "metavar_arg.dockerfile",
        "volume.dockerfile",
        "onbuild.dockerfile",
        "instruction-metavariable.dockerfile",
        "from2.dockerfile",
        "dots_stmts.dockerfile",
        "cmd-named-ellipsis.dockerfile",
        "user.dockerfile",
        "copy-param.dockerfile",
        "from-digest-metavar.dockerfile",
        "expose-metavar.dockerfile",
        "add.dockerfile",
        "anonymous_metavar.dockerfile",
        "add-chown.dockerfile",
        "dots_string.dockerfile",
        "healthcheck-options.dockerfile",
        "maintainer-metavar.dockerfile",
        "cmd-ellipsis.dockerfile",
        "healthcheck-none.dockerfile",
        "run-param-metavar.dockerfile",
        "env.dockerfile",
        "arg-metavar.dockerfile",
        "strings.dockerfile",
        "entrypoint-named-ellipsis.dockerfile",
        "healthcheck-options-cmd-ellipsis.dockerfile",
        "label-ellipsis.dockerfile",
        "user-group-metavar.dockerfile",
        "user-group.dockerfile",
        "copy.dockerfile",
        "metavar_equality_var.dockerfile",
        "cmd-shell.dockerfile",
        "label.dockerfile",
        "copy-metavar.dockerfile",
        "metavar_call.dockerfile",
        "healthcheck-options-ellipsis.dockerfile",
        "healthcheck-ellipsis.dockerfile",
        "copy-chown.dockerfile",
        "run.dockerfile",
        "dots_args.dockerfile",
        "shell.dockerfile",
        "user-group-expansion.dockerfile",
        "stopsignal-metavar.dockerfile",
        "expose-ellipsis.dockerfile",
        "run-param.dockerfile",
        "volume-ellipsis.dockerfile",
        "cmd-argv.dockerfile",
        "copy-multiple-files.dockerfile",
        "healthcheck-metavar.dockerfile",
        "concrete_syntax.dockerfile",
        "from-tag-metavar.dockerfile",
        "array-metavariable.dockerfile",
        "entrypoint-ellipsis.dockerfile",
        "from-alias-reuse.dockerfile",
        "run-anchored.dockerfile",
        "arg.dockerfile",
        "string-comparison.dockerfile",
        "run-param-mount-metavar.dockerfile",
        "volume-metavar.dockerfile",
        "from-param.dockerfile",
        "maintainer.dockerfile",
        "no-trailing-newline.dockerfile",
        "env-val-metavar.dockerfile",
        "label-variable-key.dockerfile",
        "env-key-one-char.dockerfile",
        "env-ellipsis.dockerfile",
        "env-const-prop.dockerfile",
        "from-as.dockerfile",
        "workdir.dockerfile",
        "arg-default-metavar.dockerfile",
        "instruction-ellipsis.dockerfile",
        "array-ellipsis.dockerfile",
        "stopsignal.dockerfile",
        "label-metavar.dockerfile",
        "expose.dockerfile",
        "dots_nested_stmts.dockerfile",
        "healthcheck.dockerfile",
        "multiline_comment.dockerfile",
        "workdir-metavar.dockerfile"
      ],
      "yaml_count": 0,
      "target_count": 83
    },
    "patterns/dockerfile/todo": {
      "yaml_files": [],
      "target_files": [
        "env-key-metavar.dockerfile",
        "string-fragments.dockerfile"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "patterns/rust": {
      "yaml_files": [],
      "target_files": [
        "misc_return_3.rs",
        "metavar_cond.rs",
        "dots_nested_stmts.rs",
        "anonymous_metavar.rs",
        "metavar_ellipsis.rs",
        "metavar_ellipsis_args.rs",
        "match_variant_names.rs",
        "metavar_equality_var.rs",
        "misc_scoped_idents_as.rs",
        "dots_method_chaining.rs",
        "implicit_return.rs",
        "concrete_syntax.rs",
        "attribute_function.rs",
        "deep_expr_operator.rs",
        "misc_scoped_idents.rs",
        "metavar_param.rs",
        "dots_field_chaining.rs",
        "attribute_ellipsis.rs",
        "attribute_matching.rs",
        "misc_name_pattern.rs",
        "metavar_call.rs",
        "deep_exprstmt.rs",
        "metavar_pattern.rs",
        "metavar_equality_expr.rs",
        "dots_stmts.rs",
        "dots_mod.rs",
        "metavar_func_def.rs",
        "dots_args.rs",
        "metavar_standalone.rs",
        "metavar_arg.rs",
        "dots_macro_call.rs",
        "epattern_type_prop.rs",
        "metavar_class_def.rs",
        "struct_pattern.rs",
        "misc_macrocall.rs",
        "metavar_import.rs",
        "misc_naming_recursion.rs",
        "metavar_equality_stmt.rs",
        "metavar_stmt.rs",
        "dots_string.rs",
        "misc_impl.rs",
        "dots_struct.rs"
      ],
      "yaml_count": 0,
      "target_count": 42
    },
    "patterns/TEMPLATE/beta-c-like": {
      "yaml_files": [],
      "target_files": [
        "metavar_class_def.java",
        "metavar_equality_expr.java",
        "metavar_equality_stmt.java",
        "metavar_stmt.java",
        "metavar_import.java",
        "metavar_func_def.java",
        "metavar_cond.java"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "patterns/java": {
      "yaml_files": [],
      "target_files": [
        "metavar_typed_localvar.java",
        "stmts_to_fields.java",
        "metavar_anno.java",
        "misc_instance_call.java",
        "metavar_class_def.java",
        "less_inheritance.java",
        "equivalence_constant_propagation2.java",
        "visit_attribute.java",
        "import_metavar_fullpath.java",
        "misc_brace_semi.java",
        "metavar_equality_expr.java",
        "misc_import_static.java",
        "dots_stmts.java",
        "less_generics.java",
        "cp_switch_throw.java",
        "dots_string.java",
        "boxing_equivalences_resolved_string.java",
        "misc_constructor.java",
        "metavar_typed_dot_method.java",
        "better_import1.java",
        "metavar_typed_function.java",
        "misc_def_to_assign.java",
        "misc_generic.java",
        "unordered_implement.java",
        "metavar_name.java",
        "boxing_equivalences_resolved_boolean.java",
        "metavar_typed_classfield.java",
        "dots_annotations.java",
        "typed_metavar_ternary.java",
        "metavar_call.java",
        "metavar_typed_field.java",
        "concrete_syntax.java",
        "misc_token_cast.java",
        "metavar_equality_field_vs_use.java",
        "metavar_arg.java",
        "metavar_typed.java",
        "perf_fields.java",
        "metavar_equality_stmt.java",
        "try_mutli_resources.java",
        "metavar_typed_new.java",
        "metavar_typed_methodcall.java",
        "metavar_ellipsis_args.java",
        "metavar_idspecial.java",
        "dots_annotations_brackets.java",
        "dots_generics.java",
        "aliasing_type.java",
        "regexp_case_insensitive.java",
        "metavar_stmt.java",
        "statement_list.java",
        "misc_import_resolve.java",
        "metavar_qualified_id.java",
        "misc_switch_e.java",
        "dots_for.java",
        "cp_foreach.java",
        "dots_generics2.java",
        "misc_at_interface.java",
        "dots_catch.java",
        "partial_finally.java",
        "metavar_import.java",
        "misc_annot.java",
        "metavar_equality_var.java",
        "dots_attribute.java",
        "misc_precedence.java",
        "boxing_equivalences_integer.java",
        "cp_is_must_analysis1.java",
        "dots_nested_stmts.java",
        "dots_method_chaining_simple.java",
        "typed_metavar_var.java",
        "id_qualified.java",
        "misc_constructor_public.java",
        "generics_args.java",
        "metavar_func_def.java",
        "boxing_equivalences_boxed_boolean.java",
        "metavar_package.java",
        "metavar_cond.java",
        "metavar_typed_lefthand.java",
        "regexp_pcre.java",
        "misc_record_pattern.java",
        "named_ellipsis_param.java",
        "cp_synchronized1.java",
        "metavar_typed_int.java",
        "dots_args.java",
        "cp_is_must_analysis2.java",
        "misc_static_block.java",
        "metavar_typed_qualified.java",
        "cp_try_return.java",
        "misc_import_resolve_unqualified.java",
        "metavar_typed_if_statement.java",
        "cp_is_must_analysis.java",
        "deep_cond.java",
        "typed_metavar_class.java",
        "dots_interface.java",
        "aliasing_and_direct2.java",
        "equivalence_constant_propagation.java",
        "boxing_equivalences_boolean.java",
        "deep_exprstmt.java",
        "better_import4.java",
        "misc_assert.java",
        "metavar_as_type.java",
        "boxing_equivalences_int.java",
        "partial_method.java",
        "metavar_func_anno.java",
        "metavar_typed_args.java",
        "dots_import.java",
        "dots_expr.java",
        "misc_class_literal.java",
        "metavar_ellipsis_params.java",
        "misc_super_call.java",
        "cp_synchronized.java",
        "dots_enum.java",
        "regexp_string.java",
        "dots_method_chaining.java",
        "anonymous_metavar.java",
        "better_import3.java",
        "metavar_typed_with_metavar.java",
        "equivalence_constant_propagation_field.java",
        "boxing_equivalences_string.java",
        "typed_metavar_foreach.java",
        "dots_method_chaining3.java",
        "partial_try.java",
        "boxing_equivalences_resolved_integer.java",
        "misc_accent_record.java",
        "metavar_typed_bool.java",
        "named_ellipsis_stmt.java",
        "dots_params.java",
        "dots_method_chaining2.java",
        "aliasing_qualified.java",
        "misc_varargs.java",
        "better_import2.java",
        "metavar_class_type.java",
        "misc_at_interface2.java",
        "parameterized_type.java",
        "try_resources.java",
        "deep_expr_operator.java",
        "dots_vardef.java",
        "cp_string_format.java"
      ],
      "yaml_count": 0,
      "target_count": 136
    },
    "patterns/java/errors": {
      "yaml_files": [],
      "target_files": [
        "unrecoverable_error1.java",
        "record_and_accents.java",
        "recoverable_error1.java"
      ],
      "yaml_count": 0,
      "target_count": 3
    },
    "patterns/html": {
      "yaml_files": [],
      "target_files": [
        "metavar_tag.html",
        "metavar_attr_value.html",
        "metavar_ellipsis_xmls.html",
        "anonymous_metavar.html",
        "misc_many_features.html"
      ],
      "yaml_count": 0,
      "target_count": 5
    },
    "patterns/kotlin": {
      "yaml_files": [],
      "target_files": [
        "metavar_import.kt",
        "metavar_equality_stmt.kt",
        "dots_string.kt",
        "metavar_stmt.kt",
        "unordered_extend.kt",
        "in_class_const_prop.kt",
        "single_interpolated_ident.kt",
        "misc_call_in_assign.kt",
        "interpolated_ident.kt",
        "metavar_func_def.kt",
        "not_string_metavar.kt",
        "dots_args.kt",
        "metavar_arg.kt",
        "metavar_class_def.kt",
        "misc_trailing_lambda1.kt",
        "bigger_class_with_newline.kt",
        "in_class_typing.kt",
        "dots_class_params.kt",
        "metavar_typed.kt",
        "misc_trailing_lambda2.kt",
        "deep_exprstmt.kt",
        "metavar_call.kt",
        "metavar_equality_expr.kt",
        "class_newline.kt",
        "dots_params.kt",
        "metavar_cond.kt",
        "dots_nested_stmts.kt",
        "anonymous_metavar.kt",
        "dots_method_chaining.kt",
        "concrete_syntax.kt",
        "dots_fields.kt",
        "string_metavar.kt",
        "deep_expr_operator.kt"
      ],
      "yaml_count": 0,
      "target_count": 33
    },
    "patterns/php": {
      "yaml_files": [],
      "target_files": [
        "deep_expr_operator.php",
        "dots_args_isset.php",
        "metavar_arg.php",
        "backed_enum.php",
        "dots_backquote.php",
        "dots_stmts.php",
        "dots_array.php",
        "metavar_func_def.php",
        "deep_exprstmt.php",
        "metavar_method.php",
        "metavar_ellipsis_args.php",
        "concrete_syntax.php",
        "misc_parsing_keyword_as_id.php",
        "misc_superglobals.php",
        "dots_args.php",
        "dots_include.php",
        "partial_if.php",
        "metavar_underscore.php",
        "gh_5880.php",
        "named_arguments.php",
        "metavar_cond.php",
        "equivalence_constant_propagation.php",
        "multiple_interfaces.php",
        "misc_parameter_type_qualified.php",
        "naming_rename_use_single.php",
        "regexp_string.php",
        "metavar_import.php",
        "metavar_call.php",
        "assoc_concat.php",
        "dots_method_chaining_simple.php",
        "dots_eval.php",
        "cp_import.php",
        "dots_args_in_block.php",
        "naming_rename_use_group.php",
        "misc_dots.php",
        "cp_builtin.php",
        "dots_string.php",
        "dots_interpolated.php",
        "dots_include1.php",
        "metavar_equality_var.php",
        "case_insensitive_function_id.php",
        "metavar_equality_expr.php",
        "misc_public_method.php",
        "cp_global.php",
        "misc_stmt1_fbody.php",
        "anonymous_metavar.php",
        "metavar_class.php",
        "misc_boolean_propagation.php",
        "dots_method_chaining.php",
        "dots_foreach.php",
        "metavar_class_def.php",
        "metavar_equality_stmt.php",
        "dots_echo.php",
        "misc_param_default.php",
        "foo.php",
        "dots_nested_stmts.php",
        "metavar_stmt.php",
        "metavar_param_default.php",
        "naming_origname_use_group.php",
        "metavar_anno.php",
        "metavar_param.php",
        "metavar_string.php",
        "gh_5594.php",
        "misc_goto.php",
        "constant_propogation.php",
        "naming_origname_use_single.php",
        "dots_func_in_class.php"
      ],
      "yaml_count": 0,
      "target_count": 67
    },
    "patterns/php/spatch": {
      "yaml_files": [],
      "target_files": [
        "pb_space_instanceof.php",
        "generics.php",
        "type.php",
        "static_scalar.php",
        "array_to_int_array.php",
        "stmts_fuzzy.php",
        "distr_plus.php",
        "add_statement.php",
        "xhp_metavar.php",
        "lvalue.php",
        "pb_space_new.php",
        "bar2.php",
        "xhp_nested.php",
        "remove_whole_line.php",
        "new.php",
        "remove_trailing_comment.php",
        "foo.php",
        "bar.php",
        "remove_trailing_comma.php",
        "regexp.php",
        "remove_space_between.php"
      ],
      "yaml_count": 0,
      "target_count": 21
    },
    "patterns/php/spatch/todo2": {
      "yaml_files": [],
      "target_files": [
        "border.php",
        "space1.php",
        "entgeneric.php",
        "border_var2.php",
        "border_var.php",
        "entuser.php",
        "remove_refarg.php"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "patterns/php/spatch/todo": {
      "yaml_files": [],
      "target_files": [
        "remove_second_arg.php",
        "fbt.php",
        "add_statement_indented.php",
        "pb_indent.php",
        "ui_form.php",
        "fbt_optional_last_arg.php",
        "pb_space_or.php",
        "multiline.php",
        "fbts_locale.php",
        "arg_assert2.php",
        "reindent_expr.php",
        "stmts.php",
        "metavar.php",
        "fbt_locale.php",
        "arg_assert.php",
        "funcall_multiline.php",
        "border1.php",
        "fbts.php",
        "reindent_expr2.php",
        "1.php"
      ],
      "yaml_count": 0,
      "target_count": 20
    },
    "patterns/php/spatch/errors": {
      "yaml_files": [],
      "target_files": [
        "missing_paren.php",
        "transfo_not_at_start.php"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "patterns/php/spatch/error": {
      "yaml_files": [],
      "target_files": [
        "transfo_on_comma_varargs.php"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/php/sgrep": {
      "yaml_files": [],
      "target_files": [
        "fbt.php",
        "xhp.php",
        "boolean_vs_int.php",
        "many_args.php",
        "keywords_arguments.php",
        "case_sensitive.php",
        "new_var.php",
        "static_initializers.php",
        "trailing_comma.php",
        "xhp_metavar.php",
        "if.php",
        "xhp_metavar2.php",
        "expr_pattern.php",
        "statement_pattern.php",
        "namespace2.php",
        "dots_in_brackets.php",
        "debug_rlog.php",
        "namespace.php",
        "return_this.php",
        "foreach.php",
        "argref.php",
        "foo.php",
        "string_args.php",
        "xhp_metavar_attr.php",
        "regexp.php"
      ],
      "yaml_count": 0,
      "target_count": 25
    },
    "patterns/xml": {
      "yaml_files": [],
      "target_files": [
        "misc_attribute_pattern.xml",
        "dots_body.xml"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "patterns/bash": {
      "yaml_files": [
        "added_identifier.yaml"
      ],
      "target_files": [
        "added_identifier.yaml"
      ],
      "yaml_count": 1,
      "target_count": 1
    },
    "patterns/json": {
      "yaml_files": [],
      "target_files": [
        "metavar_array.json",
        "deep_expr_operator.json",
        "partial_single_field_metavar.json",
        "anonymous_metavar.json",
        "metavar_field.json",
        "dots_dict.json",
        "partial_single_field2.json",
        "partial_single_field.json"
      ],
      "yaml_count": 0,
      "target_count": 8
    },
    "patterns/scala": {
      "yaml_files": [],
      "target_files": [
        "dots_nested_stmts.scala",
        "concrete_syntax.scala",
        "dots_match.scala",
        "equivalence_constant_propagation.scala",
        "metavar_typed_parens.scala",
        "deep_exprstmt.scala",
        "pat_ellipsis.scala",
        "by_name.scala",
        "case_class_block.scala",
        "metavar_import.scala",
        "misc_symbol.scala",
        "tuple_infix_type.scala",
        "dots_args.scala",
        "catch_ellipsis.scala",
        "metavar_key_value.scala",
        "dots_stmts.scala",
        "metavar_equality_expr.scala",
        "constructor_annots.scala",
        "implicit_return.scala",
        "for_loop.scala",
        "class_params.scala",
        "metavar_pat.scala",
        "anonymous_metavar.scala",
        "custom_interpolated.scala",
        "metavar_func_def.scala",
        "deep_expr_operator.scala",
        "metavar_stmt.scala",
        "case_object_block.scala",
        "minus_identifier.scala",
        "import_metavariable.scala",
        "dots_atom.scala",
        "metavar_call.scala",
        "tuple_def.scala",
        "metavar_arg.scala",
        "dots_string.scala",
        "infix_method.scala",
        "pat_def.scala",
        "metavar_anno.scala",
        "metavar_cond.scala",
        "match_type_ellipsis.scala",
        "metavar_class_def.scala",
        "apply_as_new.scala",
        "metavar_equality_stmt.scala",
        "metavar_typed.scala",
        "metavar_equality_var.scala",
        "metavar_atom.scala",
        "equivalence_naming_import.scala",
        "dots_method_chaining.scala",
        "for_loop_ellipsis.scala"
      ],
      "yaml_count": 0,
      "target_count": 49
    },
    "patterns/cpp": {
      "yaml_files": [],
      "target_files": [
        "metavar_stmt.cpp",
        "metavar_equality_stmt.cpp",
        "equivalence_number.cpp",
        "misc_include.cpp",
        "dots_string.cpp",
        "misc_thread_local.cpp",
        "dots_rhs.cpp",
        "dots_namespace.cpp",
        "metavar_call.cpp",
        "dots_method_chaining.cpp",
        "anonymous_metavar.cpp",
        "metavar_equality_var.cpp",
        "metavar_equality_expr.cpp",
        "toplevel_ellipsis.cpp",
        "equivalence_float.cpp",
        "typed_metavar.cpp",
        "dots_args.cpp",
        "dots_for.cpp",
        "standalone_expr.cpp",
        "regexp_string.cpp",
        "metavar_cond.cpp",
        "dots_params.cpp",
        "metavar_arg.cpp",
        "deep_expr_operator.cpp",
        "dots_stmts.cpp",
        "named_ellipsis.cpp",
        "misc_const.cpp",
        "metavar_ellipsis_args.cpp",
        "concrete_syntax.cpp",
        "deep_exprstmt.cpp",
        "block_ellipsis.cpp"
      ],
      "yaml_count": 0,
      "target_count": 31
    },
    "patterns/cpp/parsing_todo_tree_sitter": {
      "yaml_files": [],
      "target_files": [
        "non_recoverable1.cpp",
        "single_name_simple_var.cpp",
        "could_not_find_case.cpp"
      ],
      "yaml_count": 0,
      "target_count": 3
    },
    "patterns/cpp/parsing_pfff_only": {
      "yaml_files": [],
      "target_files": [
        "dotstar.cpp"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/swift": {
      "yaml_files": [],
      "target_files": [
        "nav_exp_ellipsis.swift",
        "semgrep_ellipsis_no_semi.swift",
        "dots_nested_stmts.swift",
        "unbounded_range_ellipsis.swift",
        "concrete_syntax.swift",
        "deep_exprstmt.swift",
        "class_variants.swift",
        "match_name.swift",
        "dots_args.swift",
        "labeled_binding_in_case_stmt.swift",
        "dots_stmts.swift",
        "semgrep_ellipsis.swift",
        "anonymous_metavar.swift",
        "deep_expr_operator.swift",
        "if_let.swift",
        "metavar_call.swift",
        "ellipsis_metavar.swift",
        "metavar_arg.swift",
        "dots_string.swift",
        "keypath.swift",
        "class_ellipsis.swift",
        "metavar_equality_var.swift",
        "typed_metavar.swift"
      ],
      "yaml_count": 0,
      "target_count": 23
    },
    "patterns/yaml": {
      "yaml_files": [
        "tag_literal.yaml",
        "anonymous_metavar.yaml",
        "post_unicode.yaml",
        "misc_double_id.yaml",
        "dots_list_dict.yaml",
        "tag_metavar.yaml",
        "metavar_array.yaml",
        "anchor.yaml",
        "empty.yaml",
        "metavar_field.yaml",
        "unicode.yaml",
        "field_only.yaml",
        "dots_nested.yaml",
        "metavar_equality.yaml",
        "array_field_only.yaml",
        "dots_list_list.yaml",
        "dots_dict_list.yaml",
        "misc_other_formats_braces.yaml"
      ],
      "target_files": [
        "tag_literal.yaml",
        "anonymous_metavar.yaml",
        "post_unicode.yaml",
        "misc_double_id.yaml",
        "dots_list_dict.yaml",
        "tag_metavar.yaml",
        "metavar_array.yaml",
        "anchor.yaml",
        "empty.yaml",
        "metavar_field.yaml",
        "unicode.yaml",
        "field_only.yaml",
        "dots_nested.yaml",
        "metavar_equality.yaml",
        "array_field_only.yaml",
        "dots_list_list.yaml",
        "dots_dict_list.yaml",
        "misc_other_formats_braces.yaml"
      ],
      "yaml_count": 18,
      "target_count": 18
    },
    "patterns/yaml/yaml_rules": {
      "yaml_files": [
        "colleen.yaml",
        "kubernetes_ex.yml",
        "kubernetes_spacegrep.yaml",
        "kubernetes_semgrep.yaml"
      ],
      "target_files": [
        "colleen.yaml",
        "kubernetes_ex.yml",
        "kubernetes_spacegrep.yaml",
        "kubernetes_semgrep.yaml"
      ],
      "yaml_count": 4,
      "target_count": 4
    },
    "patterns/csharp": {
      "yaml_files": [],
      "target_files": [
        "concrete_syntax.cs",
        "metavar_equality_var.cs",
        "dots_method_chaining.cs",
        "deep_expr_operator.cs",
        "dots_nested_stmts.cs",
        "metavar_cond.cs",
        "anonymous_metavar.cs",
        "metavar_ellipsis_args.cs",
        "equivalence_constant_propagation.cs",
        "dots_stmts.cs",
        "metavar_equality_expr.cs",
        "dots_class.cs",
        "metavar_typed.cs",
        "metavar_call.cs",
        "deep_exprstmt.cs",
        "metavar_anno.cs",
        "toplevel_ellipsis.cs",
        "metavar_key_value.cs",
        "metavar_arg.cs",
        "metavar_class_def.cs",
        "misc_enum_pattern.cs",
        "dots_args.cs",
        "metavar_func_def.cs",
        "loops.cs",
        "dots_parameters.cs",
        "metavar_ellipsis_new_args.cs",
        "metavar_equality_stmt.cs",
        "decl_before_init.cs",
        "metavar_import.cs",
        "metavar_stmt.cs",
        "dots_string.cs"
      ],
      "yaml_count": 0,
      "target_count": 31
    },
    "patterns/csharp/todo": {
      "yaml_files": [],
      "target_files": [
        "misc_linq.cs"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/ts": {
      "yaml_files": [],
      "target_files": [
        "metavar_func_def.ts",
        "dots_arrow_body.ts",
        "misc_type3.ts",
        "dots_args.ts",
        "param_type_annot.ts",
        "less_type_let.ts",
        "dots_type_literal.ts",
        "equivalence_decl_vs_assign.ts",
        "misc_private_prop.ts",
        "record_functions.ts",
        "metavar_arg.ts",
        "metavar_key_value.ts",
        "type_assert.ts",
        "misc_type2.ts",
        "dots_string.ts",
        "metavar_stmt.ts",
        "metavar_equality_methoddef_vs_use.ts",
        "misc_naming_recursion.ts",
        "misc_method.ts",
        "metavar_import.ts",
        "metavar_equality_stmt.ts",
        "unordered_implement.ts",
        "dots_annotated_parameter.ts",
        "regexp_fieldname.ts",
        "misc_decorator_method.ts",
        "regexp_string.ts",
        "dots_import.ts",
        "misc_ast.ts",
        "equivalence_constant_propagation.ts",
        "anonymous_metavar.ts",
        "metavar_ellipsis_args.ts",
        "metavar_cond.ts",
        "metavar_typed_class.ts",
        "ellipsis_class_body.ts",
        "misc_export.ts",
        "dots_params.ts",
        "misc_implements.ts",
        "import_vN.ts",
        "dots_nested_stmts.ts",
        "misc_semicolon.ts",
        "misc_decorator1.ts",
        "deep_expr_operator.ts",
        "opt_chain.ts",
        "dots_method_chaining.ts",
        "metavar_typed_func.ts",
        "misc_decorator_export.ts",
        "metavar_equality_var.ts",
        "misc_as_cast.ts",
        "concrete_syntax.ts",
        "metavar_typed_expr.ts",
        "metavar_call.ts",
        "deep_exprstmt.ts",
        "dots_import_complex.ts",
        "deep_record.ts",
        "misc_commonjs.ts",
        "misc_function.ts",
        "misc_deep_metavar.ts",
        "misc_type1.ts",
        "misc_extends_qualified.ts",
        "ignore_types_function.ts",
        "metavar_equality_expr.ts",
        "dots_stmts.ts"
      ],
      "yaml_count": 0,
      "target_count": 62
    },
    "patterns/c": {
      "yaml_files": [],
      "target_files": [
        "dots_params.c",
        "deep_exprstmt.c",
        "misc_typedef_inference.c",
        "equivalence_float.c",
        "goto_fail.c",
        "metavar_equality_expr.c",
        "metavar_stmt.c",
        "metavar_equality_var.c",
        "metavar_cond.c",
        "const-prop-buf-decl-flow.c",
        "metavar_arg.c",
        "metavar_ellipsis_args.c",
        "dots_sizeof.c",
        "concrete_syntax.c",
        "metavar_equality_stmt.c",
        "regexp_string.c",
        "metavar_typed_generic.c",
        "metavar_typed.c",
        "dots_stmts.c",
        "dots_string.c",
        "metavar_typed_reuse.c",
        "misc_toplevel_macrocall.c",
        "equivalence_number.c",
        "const-prop-buf-decl.c",
        "anonymous_metavar.c",
        "metavar_call.c",
        "deep_expr_operator.c",
        "dots_args.c"
      ],
      "yaml_count": 0,
      "target_count": 28
    },
    "patterns/c/partial_parsing": {
      "yaml_files": [],
      "target_files": [
        "misc_ifdef_strings.c"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "patterns/ruby": {
      "yaml_files": [],
      "target_files": [
        "foo.rb",
        "blocks1.rb",
        "cp_string_mutable.rb",
        "dots_regexp.rb",
        "metavar_func_def.rb",
        "regexp_literal.rb",
        "dots_args.rb",
        "misc_backtick_interp.rb",
        "metavar_arg.rb",
        "metavar_key_value.rb",
        "misc_div0.rb",
        "metavar_class_def.rb",
        "misc_empty_token1.rb",
        "blocks.rb",
        "misc_bitand.rb",
        "call_expr_property.rb",
        "misc_multiple_assign_uneq_lists.rb",
        "misc_multiple_assign.rb",
        "misc_parsing1.rb",
        "metavar_import.rb",
        "metavar_equality_stmt.rb",
        "dots_string.rb",
        "dots_expr.rb",
        "metavar_stmt.rb",
        "misc_kwdarg2.rb",
        "unless_argkwd.rb",
        "misc_range.rb",
        "cp_concat.rb",
        "dots_interpolated_string.rb",
        "regexp_string.rb",
        "misc_hidden_call.rb",
        "misc_kwdarg3.rb",
        "dots_struct_new.rb",
        "command_call_with_ellipsis_with_newlined_do_block.rb",
        "equivalence_keyword_args.rb",
        "metavar_classname.rb",
        "misc_dotaccess.rb",
        "metavar_cond.rb",
        "cp_interpolated.rb",
        "command_call_with_ellipsis_with_block.rb",
        "dots_nested_stmts.rb",
        "dots_multiple_interpolated.rb",
        "misc_backticks.rb",
        "equivalence_constant_propagation.rb",
        "metavar_interpolated.rb",
        "regexp_metavar.rb",
        "anonymous_metavar.rb",
        "metavar_ellipsis_args.rb",
        "lambda.rb",
        "dots_method_chaining.rb",
        "rescue_func.rb",
        "misc_parsing2.rb",
        "metavar_equality_var.rb",
        "implicit_return.rb",
        "concrete_syntax.rb",
        "metavar_atom_or_id.rb",
        "misc_dot_call.rb",
        "misc_kwdarg.rb",
        "equivalence_keyword_args_hash.rb",
        "deep_expr_operator.rb",
        "misc_kwdarg_dots.rb",
        "command_call_with_ellipsis.rb",
        "cp_assign.rb",
        "regexp_ellipsis.rb",
        "metavar_call.rb",
        "deep_exprstmt.rb",
        "command_call_with_ellipsis_with_do_block.rb",
        "metavar_regexp.rb",
        "metavar_equality_expr.rb",
        "metavar_atom.rb",
        "dots_stmts.rb",
        "regexp_template.rb",
        "metavar_ellipsis_args_empty.rb",
        "misc_kwdarg_vs_atom.rb"
      ],
      "yaml_count": 0,
      "target_count": 74
    },
    "autofix/python": {
      "yaml_files": [],
      "target_files": [
        "regexp_overcount.py",
        "fix_binop.py",
        "regexp_count.py",
        "aligned_fix_non_ast.py",
        "simple_regexp.py",
        "metavar_call.py",
        "fix_ellipsis_metavar.py",
        "capture_group.py",
        "fix_dotted_ident.py",
        "aligned_fix.py",
        "fix_within_binop.py",
        "metavar_string2.py"
      ],
      "yaml_count": 0,
      "target_count": 12
    },
    "autofix/js": {
      "yaml_files": [],
      "target_files": [
        "arrow_func.js",
        "fix_obj.js",
        "metavar_call.js",
        "metavar_arg.js"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "autofix/rust": {
      "yaml_files": [],
      "target_files": [
        "fix_vardef.rs"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "autofix/java": {
      "yaml_files": [],
      "target_files": [
        "fix_vardef.java"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "autofix/cpp": {
      "yaml_files": [],
      "target_files": [
        "fix_vardef.cpp"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "autofix/csharp": {
      "yaml_files": [],
      "target_files": [
        "fix_vardef.cs"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "autofix/ts": {
      "yaml_files": [],
      "target_files": [
        "fix_cast.ts"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "rules_v2": {
      "yaml_files": [
        "negation_ajin.yaml",
        "metavar_ellipsis_param.yaml",
        "metavar_cond2.yaml",
        "anywhere_global.yaml",
        "go_grouped_arguments.yaml",
        "decorator_sublist_is_ok.yaml",
        "decorator_order_matters.yaml",
        "metavar_analysis.yaml",
        "anywhere_metavar.yaml",
        "new_syntax_taint.yaml",
        "metavar_cond.yaml",
        "metavar_type_rule20.yaml",
        "keyword_order_matters.yaml",
        "new_syntax.yaml",
        "regexp.yaml",
        "decorator_subsequence_is_ok.yaml",
        "keyword_any_order.yaml",
        "new_syntax_taint_no_mode.yaml",
        "metavar_cond_octal.yaml",
        "metavar_regex.yaml",
        "metavar_type_multi_types_rule20_cpp.yaml",
        "r2c_was_here_again.yaml",
        "r2c_was_here.yaml",
        "decorator_unordered_ok_when_rule_option_false.yaml",
        "anywhere_include.yaml",
        "multiple_autofix.yaml"
      ],
      "target_files": [
        "new_syntax_taint_no_mode.py",
        "r2c_was_here.java",
        "negation_ajin.yaml",
        "metavar_ellipsis_param.yaml",
        "metavar_cond2.yaml",
        "anywhere_global.yaml",
        "decorator_order_matters.py",
        "go_grouped_arguments.yaml",
        "decorator_subsequence_is_ok.py",
        "decorator_unordered_ok_when_rule_option_false.py",
        "decorator_sublist_is_ok.yaml",
        "decorator_order_matters.yaml",
        "metavar_analysis.yaml",
        "anywhere_metavar.yaml",
        "new_syntax_taint.yaml",
        "metavar_cond.yaml",
        "metavar_type_rule20.yaml",
        "keyword_order_matters.yaml",
        "anywhere_global.py",
        "metavar_type_multi_types_rule20_cpp.cpp",
        "new_syntax.yaml",
        "metavar_cond.py",
        "metavar_cond2.py",
        "anywhere_metavar.py",
        "metavar_cond_octal.go",
        "regexp.yaml",
        "decorator_subsequence_is_ok.yaml",
        "keyword_any_order.yaml",
        "multiple_autofix.py",
        "new_syntax_taint_no_mode.yaml",
        "negation_ajin.py",
        "metavar_type_rule20.java",
        "metavar_cond_octal.yaml",
        "keyword_order_matters.java",
        "metavar_regex.yaml",
        "regexp.py",
        "metavar_analysis.cs",
        "new_syntax.py",
        "metavar_ellipsis_param.go",
        "anywhere_include.c",
        "metavar_type_multi_types_rule20_cpp.yaml",
        "keyword_any_order.java",
        "r2c_was_here_again.cpp",
        "new_syntax_taint.py",
        "r2c_was_here_again.yaml",
        "r2c_was_here.yaml",
        "decorator_unordered_ok_when_rule_option_false.yaml",
        "metavar_regex.py",
        "decorator_sublist_is_ok.py",
        "go_grouped_arguments.go",
        "anywhere_include.yaml",
        "multiple_autofix.yaml"
      ],
      "yaml_count": 26,
      "target_count": 52
    },
    "parsing_patterns/java": {
      "yaml_files": [],
      "target_files": [
        "import.java"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "metachecks": {
      "yaml_files": [
        "metavariable-ellipsis.yaml",
        "unbound-metavariable.rule.yaml",
        "explicit-regex-capture.yaml",
        "metavariable-ellipsis.rule.yaml",
        "unbound-metavariable.yaml",
        "nested-focus-metavariable.rule.yaml",
        "nested-focus-metavariable.yaml",
        "metavariable-pattern.yaml",
        "implicit-regex-capture.rule.yaml",
        "slow_pattern.rule.yaml",
        "slow_pattern.yaml",
        "metavariable-pattern.rule.yaml",
        "explicit-regex-capture.rule.yaml",
        "implicit-regex-capture.yaml"
      ],
      "target_files": [
        "metavariable-ellipsis.yaml",
        "unbound-metavariable.rule.yaml",
        "explicit-regex-capture.yaml",
        "metavariable-ellipsis.rule.yaml",
        "unbound-metavariable.yaml",
        "nested-focus-metavariable.rule.yaml",
        "nested-focus-metavariable.yaml",
        "metavariable-pattern.yaml",
        "implicit-regex-capture.rule.yaml",
        "slow_pattern.rule.yaml",
        "slow_pattern.yaml",
        "metavariable-pattern.rule.yaml",
        "explicit-regex-capture.rule.yaml",
        "implicit-regex-capture.yaml"
      ],
      "yaml_count": 14,
      "target_count": 14
    },
    "rules_error_recovery": {
      "yaml_files": [
        "lines_of_file_outofbound.yaml"
      ],
      "target_files": [
        "lines_of_file_outofbound.tf",
        "lines_of_file_outofbound.yaml"
      ],
      "yaml_count": 1,
      "target_count": 2
    },
    "semgrep-core-e2e": {
      "yaml_files": [],
      "target_files": [
        "targets.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "semgrep-core-e2e/targets": {
      "yaml_files": [],
      "target_files": [
        "basic.py"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "semgrep-core-e2e/rules": {
      "yaml_files": [
        "basic.yaml"
      ],
      "target_files": [
        "basic.yaml"
      ],
      "yaml_count": 1,
      "target_count": 1
    },
    "TODO": {
      "yaml_files": [],
      "target_files": [
        "global.py",
        "imports2.py",
        "flask.py",
        "stupid.py",
        "test.py",
        "imports.py",
        "class.py",
        "foo.js",
        "misc_export_default_ext.js",
        "foo.py",
        "naming.java",
        "bad.py",
        "stmt_ellipsis.py"
      ],
      "yaml_count": 0,
      "target_count": 13
    },
    "typing": {
      "yaml_files": [],
      "target_files": [
        "EqVarCmp.java",
        "FuncParam.go",
        "ClassFields.java",
        "StaticVarDef.go",
        "BasicParam.java",
        "VarDef.java",
        "PropVarDef.go"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "irrelevant_rules": {
      "yaml_files": [
        "taint-general-sink.yaml",
        "pattern-either.yaml",
        "mvar-regex1.yaml",
        "mvar-regex.yaml",
        "pattern-and-one-general.yaml",
        "pattern-or.yaml",
        "taint-general-source.yaml",
        "pattern.yaml",
        "typed-mvar.yaml",
        "mvar-regex2.yaml",
        "pattern-regex.yaml",
        "pattern-and.yaml"
      ],
      "target_files": [
        "taint-general-sink.yaml",
        "pattern-either.py",
        "pattern-either.yaml",
        "mvar-regex2.go",
        "mvar-regex1.yaml",
        "mvar-regex.yaml",
        "pattern-and-one-general.yaml",
        "pattern-regex.py",
        "taint-general-source.py",
        "pattern-or.yaml",
        "pattern-and-one-general.js",
        "pattern.py",
        "typed-mvar.java",
        "taint-general-source.yaml",
        "pattern-or.js",
        "taint-general-sink.py",
        "pattern.yaml",
        "typed-mvar.yaml",
        "pattern-and.py",
        "mvar-regex2.yaml",
        "pattern-regex.yaml",
        "mvar-regex.cs",
        "pattern-and.yaml"
      ],
      "yaml_count": 12,
      "target_count": 23
    },
    "syntax_v2": {
      "yaml_files": [
        "anywhere.yaml",
        "options.yaml",
        "where_types.yaml",
        "labeled_propagators.yaml",
        "fix.yaml",
        "where_formula_language.yaml",
        "metadata.yaml",
        "regexp_nomatch.yaml",
        "options_aliengrep.yaml",
        "match.yaml",
        "validators.yaml",
        "where_formula.yaml",
        "options_comments.yaml",
        "where_regex_constprop.yaml",
        "not_formula.yaml",
        "steps.yaml",
        "where_regex.yaml",
        "taint.yaml",
        "metadata_supply_chain.yaml",
        "severity_new.yaml",
        "depends_on_either.yaml",
        "depends_on.yaml",
        "where_comparison.yaml",
        "where_type.yaml",
        "taint_labels.yaml",
        "extract.yaml",
        "min_version.yaml"
      ],
      "target_files": [
        "anywhere.yaml",
        "options.yaml",
        "where_types.yaml",
        "labeled_propagators.yaml",
        "fix.yaml",
        "where_formula_language.yaml",
        "metadata.yaml",
        "regexp_nomatch.yaml",
        "options_aliengrep.yaml",
        "match.yaml",
        "validators.yaml",
        "where_formula.yaml",
        "options_comments.yaml",
        "where_regex_constprop.yaml",
        "not_formula.yaml",
        "steps.yaml",
        "where_regex.yaml",
        "taint.yaml",
        "metadata_supply_chain.yaml",
        "severity_new.yaml",
        "depends_on_either.yaml",
        "depends_on.yaml",
        "where_comparison.yaml",
        "where_type.yaml",
        "taint_labels.yaml",
        "extract.yaml",
        "min_version.yaml"
      ],
      "yaml_count": 27,
      "target_count": 27
    },
    "taint_maturity/python": {
      "yaml_files": [
        "taint_if.yaml",
        "taint_seq.yaml"
      ],
      "target_files": [
        "taint_if.py",
        "taint_if.yaml",
        "taint_seq.py",
        "taint_seq.yaml"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "taint_maturity/java": {
      "yaml_files": [
        "taint_if.yaml",
        "taint_seq.yaml"
      ],
      "target_files": [
        "taint_if.yaml",
        "taint_seq.java",
        "taint_seq.yaml",
        "taint_if.java"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "taint_maturity/php": {
      "yaml_files": [
        "taint_if.yaml",
        "taint_seq.yaml"
      ],
      "target_files": [
        "taint_if.yaml",
        "taint_if.php",
        "taint_seq.yaml",
        "taint_seq.php"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "taint_maturity/csharp": {
      "yaml_files": [
        "taint_if.yaml",
        "taint_seq.yaml"
      ],
      "target_files": [
        "taint_seq.cs",
        "taint_if.yaml",
        "taint_if.cs",
        "taint_seq.yaml"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "taint_maturity/c": {
      "yaml_files": [
        "taint_if.yaml",
        "taint_seq.yaml"
      ],
      "target_files": [
        "taint_if.yaml",
        "taint_seq.c",
        "taint_if.c",
        "taint_seq.yaml"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "precommit_dogfooding": {
      "yaml_files": [
        "bandit.yml",
        "python.yml"
      ],
      "target_files": [
        "bandit.yml",
        "python.yml"
      ],
      "yaml_count": 2,
      "target_count": 2
    },
    "naming/go": {
      "yaml_files": [],
      "target_files": [
        "vardef_vs_use.go",
        "const_propagation.go"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "naming/python": {
      "yaml_files": [],
      "target_files": [
        "assign_vardef.py",
        "regression1.py",
        "exn.py",
        "iterator.py",
        "shadow_name_type.py",
        "scope.py"
      ],
      "yaml_count": 0,
      "target_count": 6
    },
    "naming/js": {
      "yaml_files": [],
      "target_files": [
        "vardef_vs_use.js"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "naming/java": {
      "yaml_files": [],
      "target_files": [
        "unknown_var.java",
        "vardef_vs_use.java"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "jsonnet/tutorial/fail": {
      "yaml_files": [],
      "target_files": [
        "arith.json",
        "functions.json",
        "comprehensions.json"
      ],
      "yaml_count": 0,
      "target_count": 3
    },
    "jsonnet/tutorial/only_subst": {
      "yaml_files": [],
      "target_files": [
        "sours_oo.json",
        "oo-contrived.json"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "jsonnet/tutorial/pass": {
      "yaml_files": [],
      "target_files": [
        "references.json",
        "inner_references.json",
        "sours.json",
        "conditionals.json",
        "computer_fields.json",
        "variables.json",
        "imports.json"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "jsonnet/tutorial/too_slow": {
      "yaml_files": [],
      "target_files": [
        "mixins.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "jsonnet/tutorial/only_envir": {
      "yaml_files": [],
      "target_files": [
        "negroni.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "jsonnet/tutorial/parse_errors": {
      "yaml_files": [],
      "target_files": [
        "top_level_ext.json",
        "top_level_tla.json"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "jsonnet/only_subst": {
      "yaml_files": [],
      "target_files": [
        "basic_super2.json",
        "static_binding_in_super_object.json",
        "multiple_inheritance.json",
        "grandparent_with_super.json",
        "basic_super.json"
      ],
      "yaml_count": 0,
      "target_count": 5
    },
    "jsonnet/pass": {
      "yaml_files": [],
      "target_files": [
        "plus_object.json",
        "filter.json",
        "import_local.json",
        "simple_self.json",
        "array_comprehension2.json",
        "function.json",
        "short_circuit_func.json",
        "concat1.json",
        "obj_access.json",
        "adding_self_to_self.json",
        "self_in_array.json",
        "multiple_inheritance_with_empty.json",
        "import.json",
        "self_access.json",
        "render_int.json",
        "string.json",
        "extending_self_on_left.json",
        "object.json",
        "simple_self_with_plus.json",
        "length.json",
        "importstr.json",
        "returning_self.json",
        "self_as_object.json",
        "internal_merge.json",
        "objectHas.json",
        "string_access.json",
        "null_field.json",
        "simple_test.json",
        "use_std.json",
        "closure2.json",
        "inf.json",
        "self_bound_correctly_in_superobjects.json",
        "closure.json",
        "extending_self_on_right.json",
        "concat2.json",
        "nested_object_with_self.json",
        "basic_super1.json",
        "super_up_two_levels.json",
        "locals_in_objects.json",
        "basic.json"
      ],
      "yaml_count": 0,
      "target_count": 40
    },
    "jsonnet/only_envir": {
      "yaml_files": [],
      "target_files": [
        "format_string.json",
        "format_percent.json",
        "format.json",
        "array_comprehension1.json"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "jsonnet/errors": {
      "yaml_files": [],
      "target_files": [
        "object_comprehension2.json",
        "object_comprehension1.json"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "parsing_missing/cpp": {
      "yaml_files": [],
      "target_files": [
        "missing-semicolon.cpp"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "parsing_missing/c": {
      "yaml_files": [],
      "target_files": [
        "missing-semicolon.c"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "tainting_rules/go": {
      "yaml_files": [
        "nobuiltin.yaml",
        "zip-traversal.yaml",
        "make.yaml",
        "switch.yaml",
        "goto_dead_code.yaml",
        "token_labels.yaml",
        "switch_no_scrutinee.yaml",
        "continue.yaml",
        "command-injection.yaml"
      ],
      "target_files": [
        "nobuiltin.yaml",
        "zip-traversal.yaml",
        "make.yaml",
        "switch_no_scrutinee.go",
        "switch.yaml",
        "command-injection.go",
        "switch.go",
        "goto_dead_code.yaml",
        "goto_dead_code.go",
        "token_labels.go",
        "token_labels.yaml",
        "switch_no_scrutinee.yaml",
        "make.go",
        "continue.go",
        "continue.yaml",
        "command-injection.yaml",
        "nobuiltin.go",
        "zip-traversal.go"
      ],
      "yaml_count": 9,
      "target_count": 18
    },
    "tainting_rules/python": {
      "yaml_files": [
        "try_finally1.yaml",
        "break.yaml",
        "sink_return.yaml",
        "source_param.yaml",
        "sink_param.yaml",
        "try_raise.yaml",
        "try_finally.yaml",
        "simpl_django_redirect.yaml",
        "fake_tokens.yaml",
        "raise_no_args.yaml",
        "raise_from.yaml",
        "tainting_top.yaml"
      ],
      "target_files": [
        "try_finally1.yaml",
        "break.yaml",
        "sink_return.yaml",
        "source_param.yaml",
        "sink_param.yaml",
        "try_raise.yaml",
        "try_finally.py",
        "try_finally.yaml",
        "simpl_django_redirect.py",
        "sink_param.py",
        "fake_tokens.py",
        "try_finally1.py",
        "simpl_django_redirect.yaml",
        "fake_tokens.yaml",
        "raise_from.py",
        "source_param.py",
        "raise_no_args.py",
        "sink_return.py",
        "raise_no_args.yaml",
        "raise_from.yaml",
        "try_raise.py",
        "tainting_top.yaml",
        "tainting_top.py",
        "break.py"
      ],
      "yaml_count": 12,
      "target_count": 24
    },
    "tainting_rules/js": {
      "yaml_files": [
        "metavar_eq_conditional.yaml",
        "call_chain.yaml",
        "sanitized_by_side_effect.yaml",
        "everything_source1.yaml",
        "metavar_eq_simple.yaml",
        "nested_function.yaml",
        "await.yaml",
        "everything_source.yaml",
        "throw.yaml",
        "simpl_nodejs_eval.yaml",
        "eslint_obj_inj.yaml"
      ],
      "target_files": [
        "metavar_eq_conditional.yaml",
        "nested_function.js",
        "metavar_eq_conditional.js",
        "call_chain.yaml",
        "sanitized_by_side_effect.js",
        "sanitized_by_side_effect.yaml",
        "metavar_eq_simple.js",
        "everything_source1.yaml",
        "metavar_eq_simple.yaml",
        "nested_function.yaml",
        "eslint_obj_inj.js",
        "call_chain.js",
        "simpl_nodejs_eval.js",
        "await.yaml",
        "everything_source.js",
        "await.js",
        "everything_source.yaml",
        "throw.yaml",
        "everything_source1.js",
        "simpl_nodejs_eval.yaml",
        "eslint_obj_inj.yaml",
        "throw.js"
      ],
      "yaml_count": 11,
      "target_count": 22
    },
    "tainting_rules/java": {
      "yaml_files": [
        "try_return.yaml",
        "tainted_args.yaml"
      ],
      "target_files": [
        "tainted_args.java",
        "try_return.yaml",
        "try_return.java",
        "tainted_args.yaml"
      ],
      "yaml_count": 2,
      "target_count": 4
    },
    "tainting_rules/php": {
      "yaml_files": [
        "echo.yaml",
        "break.yaml",
        "no_duplicate_submatches.yaml",
        "switch.yaml",
        "ternary.yaml",
        "lval_var_sink.yaml"
      ],
      "target_files": [
        "echo.yaml",
        "break.yaml",
        "no_duplicate_submatches.yaml",
        "switch.yaml",
        "echo.php",
        "ternary.php",
        "switch.php",
        "break.php",
        "ternary.yaml",
        "lval_var_sink.yaml",
        "lval_var_sink.php",
        "no_duplicate_submatches.php"
      ],
      "yaml_count": 6,
      "target_count": 12
    },
    "tainting_rules/scala": {
      "yaml_files": [
        "new_object_sink.yaml"
      ],
      "target_files": [
        "new_object_sink.yaml",
        "new_object_sink.scala"
      ],
      "yaml_count": 1,
      "target_count": 2
    },
    "tainting_rules/ts": {
      "yaml_files": [
        "source_exp.yaml"
      ],
      "target_files": [
        "source_exp.yaml",
        "source_exp.ts"
      ],
      "yaml_count": 1,
      "target_count": 2
    },
    "tainting_rules/ruby": {
      "yaml_files": [
        "switch.yaml"
      ],
      "target_files": [
        "switch.yaml",
        "switch.rb"
      ],
      "yaml_count": 1,
      "target_count": 2
    },
    "rules": {
      "yaml_files": [
        "settings.yaml",
        "taint_best_fit_sink8.yaml",
        "pattern-x-3.yaml",
        "sym_prop_no_merge2.yaml",
        "anonymous_metavar.yaml",
        "misc_deep_metavar.yaml",
        "taint_cpp_ptr_field.yaml",
        "metavar_pattern_generic.yaml",
        "as_metavariable.yaml",
        "taint_return_expr_fn_sink.yaml",
        "taint_expr_in_type.yaml",
        "taint_no_builtin_props3.yaml",
        "whole_file.yaml",
        "metavariable_pattern_php.yaml",
        "sym_prop_class_attr.yaml",
        "metavariable_pattern_either_unif.yaml",
        "misc_tpl_is_php.yaml",
        "taint_labels1.yaml",
        "taint_decl_in_while_cond.yaml",
        "taint_lambda4.yaml",
        "ts_decorated_static_property.yaml",
        "defer-persistent-binding.yaml",
        "sym_prop_exp.yaml",
        "eval_not_in.yaml",
        "taint_best_fit_sink4.yaml",
        "yaml_on_yaml.yaml",
        "xml_metavar_comp.yaml",
        "taint_field_sensitive5.yaml",
        "taint_param_pattern.yaml",
        "propagator_labels.yaml",
        "sym_prop_explosion.yaml",
        "taint_assume_safe_booleans1.yaml",
        "prim_obj_init_cpp.yaml",
        "taint_assume_safe_funcs.yaml",
        "metavar_regex_include.yaml",
        "option_ac_matching.yaml",
        "misc_php_new_taint.yaml",
        "ellipsis_metavar_template.yaml",
        "pattern_not_regex.yaml",
        "TEMPLATE.yaml",
        "regression_uniq_or_ellipsis.yaml",
        "attributes_match_multiple.yaml",
        "TODO_taint_messy_sink.yaml",
        "spacegrep_metavarbug.yaml",
        "typed_metavar_not.yaml",
        "metavar_pattern_regex4.yaml",
        "metavar_type_str_eq_php.yaml",
        "taint_unsafe_block.yaml",
        "pattern-either-one-general.yaml",
        "taint_assign_record1.yaml",
        "option_xml_attr_implicit_ellipsis.yaml",
        "anywhere_global.yaml",
        "metavar_type_multi_types_cpp.yaml",
        "metavar_type_not_kotlin.yaml",
        "persistent_metavariable_pattern.yaml",
        "julia_let_taint.yaml",
        "labeled_propagators.yaml",
        "generic_multilines.yaml",
        "metavariable_pattern_keep_env.yaml",
        "metavar_type_non_prim_php.yaml",
        "metavariable_object_type.yaml",
        "taint_assign_cleans_shape.yaml",
        "taint_labels_empty.yaml",
        "sym_prop_non_literal.yaml",
        "metavar_pattern_generic_gibberish.yaml",
        "taint_splat.yaml",
        "record_one_spread.yaml",
        "taint_ruby_hash_elem_ref.yaml",
        "rust_macro_token_args.yaml",
        "taint_assume_safe_numbers1.yaml",
        "terraform_nested_yaml.yaml",
        "rule_extensions.yaml",
        "taint_typestate1.yaml",
        "pow_metavar_comparison.yaml",
        "pattern_regex_inside.yaml",
        "taint_field_sensitive4.yaml",
        "taint_best_fit_sink5.yaml",
        "taint_assume_safe_booleans.yaml",
        "taint_lambda.yaml",
        "taint_cpp_for_each.yaml",
        "cp_subtraction1.yaml",
        "vardef_assign_true.yaml",
        "metavar_pattern_nested.yaml",
        "taint_clean_in_try_no_finally.yaml",
        "record_field_ellipsis.yaml",
        "regexp_capture_groups.yaml",
        "parse_pattern_as_stmt.yaml",
        "taint_iterator_values.yaml",
        "yaml_on_yaml.test.yaml",
        "pattern_move_standalone_mod_member.yaml",
        "taint_no_builtin_props2.yaml",
        "struct_tags.yaml",
        "taint_get_set_sensitivity.yaml",
        "metavar_pattern_lang1.yaml",
        "metavar_regex_scope.yaml",
        "taint_match_on_source.yaml",
        "capture_group_unification.yaml",
        "taint_param_source.yaml",
        "decorated_match.yaml",
        "focus_metavariable2.yaml",
        "metavar_type_not_rust.yaml",
        "taint_object_funcdef_1.yaml",
        "vardef_assign_true2.yaml",
        "taint_field_sensitive8.yaml",
        "cp_private_class_attr1.yaml",
        "anywhere_metavar.yaml",
        "pattern-x-2.yaml",
        "taint_best_fit_sink9.yaml",
        "df_scala_expr_block.yaml",
        "regex_capture_groups.yaml",
        "regexp_multiline_mode.yaml",
        "negation_exact.yaml",
        "taint_best_fit_sink2.yaml",
        "taint_control.yaml",
        "tainted_pattern_lval.yaml",
        "xml_metavar_comp2.yaml",
        "taint_field_sensitive3.yaml",
        "taint_best_fit_sink.yaml",
        "pattern-x-bug.yaml",
        "taint_not_conflicting_sanitizer.yaml",
        "metavar_type_str_eq_python.yaml",
        "taint_propagator_lambda2.yaml",
        "taint_best_fit_sink10.yaml",
        "metavar_pattern_regex.yaml",
        "taint_propagator_by_side_effect_false1.yaml",
        "quotes.yaml",
        "taint_param_source2.yaml",
        "taint_unify_mvars.yaml",
        "metavar_ellipsis_xmls.yaml",
        "taint_source_var1.yaml",
        "sym_prop_lhs_exp.yaml",
        "taint_if_cond_sink.yaml",
        "metavar_pattern_regex2.yaml",
        "js_constructor_naming.yaml",
        "naming_class_attribute.yaml",
        "no_strict_metavar_name_binding.yaml",
        "placement_new_cpp.yaml",
        "taint_wo_side_effects.yaml",
        "for_in_comprehension_metavar.yaml",
        "deep_expr_xml.yaml",
        "inside_test.yaml",
        "sym_prop_lambda.yaml",
        "misc_field.yaml",
        "string_in_comparison.yaml",
        "date_comparison.yaml",
        "taint_flask.yaml",
        "js_bracket.yaml",
        "bitwise_metavar_compare.yaml",
        "decorated-field.yaml",
        "taint_exact_sources.yaml",
        "terraform_coercions.yaml",
        "sym_prop_merge1.yaml",
        "taint_labels7.yaml",
        "taint_lambda2.yaml",
        "taint_spread_record_big.yaml",
        "taint_assign_record.yaml",
        "terraform_block_sink.yaml",
        "taint_lambda_cpp.yaml",
        "metavar_pattern_dots_mvar.yaml",
        "taint_lambda3.yaml",
        "taint_final_globals2.yaml",
        "metavar_type_str_eq_java.yaml",
        "taint_labels6.yaml",
        "ellipsis_stmts_deep1.yaml",
        "julia_type_parameter.yaml",
        "taint_propagator_by_side_effect_false.yaml",
        "taint_propagator1.yaml",
        "metavar_name_imported_entity_js.yaml",
        "metavar_comparison_constness.yaml",
        "cp_relevant_rule.yaml",
        "taint_obj_fields.yaml",
        "taint_nested_record_pattern.yaml",
        "taint_propagator.yaml",
        "numeric_regex_capture_groups.yaml",
        "pattern-x-4.yaml",
        "sym_prop_decorator.yaml",
        "pattern-x.yaml",
        "swift_lambda_taint.yaml",
        "sym_prop_exp_no_propagate.yaml",
        "taint_exception.yaml",
        "string_mvar_julia.yaml",
        "taint_array.yaml",
        "taint_cpp_ptr_field1.yaml",
        "metavar_pattern_regex3.yaml",
        "cp_python_and_or.yaml",
        "metavar_comparison_constness1.yaml",
        "taint_ruby_concat.yaml",
        "metavar_pattern_lang.yaml",
        "pattern-inside-range.yaml",
        "ellipsis_metavar_extended_match.yaml",
        "cp_lambda.yaml",
        "metavar_unification.yaml",
        "taint_wo_side_effects2.yaml",
        "metavar_call_case_insensitive.yaml",
        "taint_param_source3.yaml",
        "taint_param_default.yaml",
        "taint_foreach1.yaml",
        "quotes.test.yaml",
        "metavar_pattern_nested1.yaml",
        "metavar_pattern_open_redirect.yaml",
        "taint-general-source-sink.yaml",
        "prometheus_long_duration_promql.test.yaml",
        "sym_prop_deep.yaml",
        "metavar_pattern_either.yaml",
        "taint_assume_safe_indexes.yaml",
        "taint_field_sensitive2.yaml",
        "taint_best_fit_sink3.yaml",
        "sym_prop_no_merge.yaml",
        "taint_propagator_lambda.yaml",
        "pattern_move_let_bind.yaml",
        "typed_metavar_metavar_regex.yaml",
        "kotlin_slow_import.yaml",
        "record_empty.yaml",
        "misc_php_new.yaml",
        "taint_labels_rec.yaml",
        "focus_metavariable.yaml",
        "sym_prop_new.yaml",
        "taint_rust_returns.yaml",
        "option_symmetric_eq.yaml",
        "taint_spread_record_small.yaml",
        "taint_wo_side_effects1.yaml",
        "redos_python.yaml",
        "assign_in_cond_expr_cpp.yaml",
        "not_found_exn.yaml",
        "non_irrelevant_rule.yaml",
        "taint_this1.yaml",
        "metavar_type_not_java.yaml",
        "taint_typestate4.yaml",
        "metavar_comparison_bitor.yaml",
        "taint_get_set_sensitivity1.yaml",
        "taint_sanitizer_var.yaml",
        "terraform_mvar_regex_interpolated_var.yaml",
        "js_no_ts.yaml",
        "metavar_type_not_typescript.yaml",
        "taint_field_sensitive1.yaml",
        "python_fstring_ellipsis.yaml",
        "ctor_cpp.yaml",
        "misc_macro_call.yaml",
        "metavar_pattern_not.yaml",
        "metavar_pattern_fake_toks.yaml",
        "taint_final_globals1.yaml",
        "taint_labels5.yaml",
        "taint_param_default1.yaml",
        "cp_private_class_attr.yaml",
        "metavar_pattern_name.yaml",
        "pattern_move_struct_member.yaml",
        "metavariable_name_resolution.yaml",
        "pattern_not_regex1.yaml",
        "option_attr_expr_true.yaml",
        "taint_propagator2.yaml",
        "julia_typed_mvar.yaml",
        "resolved_metavariables.yaml",
        "taint_foreach.yaml",
        "metavar_type_func_param_go.yaml",
        "not_found_exn2.yaml",
        "cpp_array_inits.yaml",
        "metavar_type_not_csharp.yaml",
        "sym_prop_python_with1.yaml",
        "unicode_string.yaml",
        "metavar_ellipsis_args_empty.yaml",
        "metavar_regex_scope4.yaml",
        "taint_react.yaml",
        "sym_prop_chain.yaml",
        "option_implicit_exprstmt.yaml",
        "macro_arg_taint.yaml",
        "prometheus_long_duration_promql.yaml",
        "record_any.yaml",
        "taint_propagator3.yaml",
        "sym_prop_redundancy.yaml",
        "taint_no_builtin_props.yaml",
        "pattern_int.yaml",
        "neg_op_lit_equiv.yaml",
        "top_level_sym_prop.yaml",
        "inception.yaml",
        "sym_prop_merge2.yaml",
        "sym_prop_record.yaml",
        "taint_non_exact_sink.yaml",
        "metavar_comparison_bitnot.yaml",
        "taint_labels4.yaml",
        "metavar_type_func_param_julia.yaml",
        "metavar_type_decorator_python.yaml",
        "c_array_inits.yaml",
        "taint_lambda1.yaml",
        "taint_imported_func.yaml",
        "record_one_field.yaml",
        "metavar_type_simple_move_on_aptos.yaml",
        "sym_prop_no_cycle1.yaml",
        "taint_best_fit_sink1.yaml",
        "metavar_pattern_fake_toks1.yaml",
        "taint_object_funcdef.yaml",
        "metavar_pattern_old_tls_versions.yaml",
        "pattern-regex.yaml",
        "taint_propagator_lambda1.yaml",
        "taint_typestate5.yaml",
        "sym_prop_react.yaml",
        "int_binop.yaml",
        "inception2.yaml",
        "taint_this.yaml",
        "taint_ruby_if_expr.yaml",
        "not-under-inside.yaml",
        "no_fatal_error_with_xxx_equal.yaml",
        "taint_param_source1.yaml",
        "and_inside.yaml",
        "taint_return_expr.yaml",
        "metavar_pattern_regex1.yaml",
        "yaml_metavariable_pattern.test.yaml",
        "taint_safe_comparisons.yaml",
        "taint_source_var.yaml",
        "taint_object_destructure.yaml",
        "misc_name_and_neg.yaml",
        "pattern_move_func_signature.yaml",
        "kotlin_named_ellipsis.yaml",
        "sym_prop_open_redirect.yaml",
        "misc_eval_nothandle.yaml",
        "different_binding_locations.yaml",
        "metavar_type_not_scala.yaml",
        "taint_labels3.yaml",
        "taint_decl_in_if_cond.yaml",
        "tainted-filename.yaml",
        "generic_dots_mvar.yaml",
        "tainted-file-path.yaml",
        "misc_var_is_var.yaml",
        "metavar_comparison_bitxor.yaml",
        "taint_no_builtin_props1.yaml",
        "string_vs_char_ptr_cpp.yaml",
        "typed_metavar_not_rust.yaml",
        "metavar_pattern_lang2.yaml",
        "taint_propagator4.yaml",
        "metavar_comparison_str.yaml",
        "redos_bracket_colon.yaml",
        "cp_mults.yaml",
        "record_spread_ellipsis.yaml",
        "focus_metavariable1.yaml",
        "vardef_assign_true1.yaml",
        "severity_critical.yaml",
        "cp_private_class_attr2.yaml",
        "pattern-x-1.yaml",
        "metavar_type_simple_c.yaml",
        "metavar_regex_scope2.yaml",
        "ts_decorated_async_property.yaml",
        "entropy_python.yaml",
        "decorated_field_pattern.yaml",
        "ellipsis_in_case.yaml",
        "metavar_type_not_go.yaml",
        "anywhere_include.yaml",
        "taint_typestate.yaml",
        "taint_final_globals.yaml",
        "taint_assume_safe_numbers2.yaml",
        "sym_prop_non_constant_exp.yaml",
        "option_xml_singleton.yaml",
        "metavar_regex_and.yaml",
        "taint_async.yaml",
        "metavar_regex_capture.yaml",
        "taint_implicit_return.yaml",
        "regexp_capture_empty_group.yaml",
        "taint_typestate2.yaml",
        "sym_prop_no_cycle.yaml",
        "record_mixed.yaml",
        "taint_field_sensitive7.yaml",
        "option_attr_expr_true1.yaml",
        "as_metavariable2.yaml",
        "sym_prop_string_eq.yaml",
        "taint_union_mvars.yaml",
        "taint_best_fit_sink6.yaml",
        "taint_basic.yaml",
        "metavar_regex_id.yaml",
        "taint_expr_in_type_labels.yaml",
        "python_fstring_eval.yaml",
        "metavar_template_type_arg.yaml",
        "taint_best_fit_sink7.yaml",
        "taint_field_sensitive6.yaml",
        "taint_typestate3.yaml",
        "option_attr_expr_false.yaml",
        "compare-exposed-port.yaml",
        "taint_assume_safe_numbers3.yaml",
        "taint_assume_safe_numbers.yaml",
        "taint_not_conflicting_sanitizer1.yaml",
        "cp_subtraction.yaml",
        "terraform_metavariable.yaml",
        "option_xml_children_ordered.yaml",
        "taint_assign_record2.yaml",
        "relevant_rule_badutf8.yaml",
        "metavariable_pattern_recursive_def.yaml",
        "yaml_metavariable_pattern.yaml",
        "metavar_name_imported_entity_java.yaml",
        "sym_prop_python_with.yaml",
        "sym_prop_merge.yaml",
        "taint_single_variable_source.yaml",
        "taint_labels.yaml",
        "generic_ignore_comments.yaml",
        "metavar_regex_scope3.yaml",
        "metavar_call.yaml",
        "cast_symbol_prop.yaml",
        "cp_private_class_attr3.yaml",
        "sym_prop_no_merge1.yaml",
        "generic_single_line_ellipsis.yaml",
        "mvar_regex_interpolated_var.yaml",
        "misc_terraform1.yaml",
        "vardef_assign_false.yaml",
        "inside.yaml",
        "taint_exact_sanitizer.yaml",
        "cp_python_strings.yaml",
        "strict_metavar_name_binding.yaml",
        "vardef_assign_false1.yaml",
        "ellipsis_stmts_deep.yaml",
        "metavar_comparison_bitand.yaml",
        "persistent_metavariable_pattern2.yaml",
        "taint_labels2.yaml",
        "option_fielddef_assign_arrow.yaml",
        "taint_by_side_effect_lhs.yaml",
        "metavar_type_simple_cpp.yaml"
      ],
      "target_files": [
        "settings.yaml",
        "taint_best_fit_sink8.yaml",
        "pattern-x-3.yaml",
        "taint_this.js",
        "sym_prop_no_merge2.yaml",
        "vardef_assign_false1.js",
        "terraform_metavariable.tf",
        "metavar_pattern_nested.py",
        "decorated_field_pattern.ts",
        "anonymous_metavar.yaml",
        "misc_deep_metavar.yaml",
        "taint_param_source1.js",
        "metavariable_pattern_php.php",
        "taint_cpp_ptr_field.yaml",
        "metavar_pattern_generic.yaml",
        "as_metavariable.yaml",
        "taint_lambda_cpp.cpp",
        "taint_return_expr_fn_sink.yaml",
        "taint_expr_in_type.yaml",
        "taint_no_builtin_props3.yaml",
        "taint_final_globals.java",
        "whole_file.yaml",
        "metavariable_pattern_php.yaml",
        "xml_metavar_comp.xml",
        "sym_prop_class_attr.yaml",
        "metavariable_pattern_either_unif.yaml",
        "misc_tpl_is_php.yaml",
        "taint_labels1.yaml",
        "taint_labels4.py",
        "taint_decl_in_while_cond.yaml",
        "taint_lambda4.yaml",
        "ts_decorated_static_property.yaml",
        "defer-persistent-binding.yaml",
        "taint_best_fit_sink6.java",
        "sym_prop_exp.yaml",
        "eval_not_in.yaml",
        "taint_best_fit_sink4.yaml",
        "sym_prop_python_with.py",
        "sym_prop_no_merge2.py",
        "yaml_on_yaml.yaml",
        "swift_lambda_taint.swift",
        "xml_metavar_comp.yaml",
        "taint_field_sensitive5.yaml",
        "taint_param_pattern.yaml",
        "propagator_labels.yaml",
        "sym_prop_explosion.yaml",
        "taint_assume_safe_booleans1.yaml",
        "ellipsis_stmts_deep.py",
        "as_metavariable.py",
        "prim_obj_init_cpp.yaml",
        "tainted-file-path.java",
        "pattern_int.py",
        "taint_assume_safe_funcs.yaml",
        "metavar_comparison_bitxor.java",
        "taint_propagator_lambda1.py",
        "metavar_regex_include.yaml",
        "option_ac_matching.yaml",
        "misc_php_new_taint.yaml",
        "ellipsis_metavar_template.yaml",
        "pattern_not_regex.yaml",
        "taint_typestate4.cpp",
        "TEMPLATE.yaml",
        "taint_no_builtin_props1.py",
        "regression_uniq_or_ellipsis.yaml",
        "attributes_match_multiple.yaml",
        "taint_typestate5.cpp",
        "TODO_taint_messy_sink.yaml",
        "spacegrep_metavarbug.yaml",
        "taint_propagator4.java",
        "typed_metavar_not.yaml",
        "typed_metavar_not_rust.rs",
        "metavar_pattern_regex4.yaml",
        "metavar_type_str_eq_php.yaml",
        "capture_group_unification.py",
        "taint_unsafe_block.yaml",
        "metavar_type_not_go.go",
        "kotlin_named_ellipsis.kt",
        "pattern-either-one-general.yaml",
        "vardef_assign_true1.js",
        "pattern-x.js",
        "metavar_type_not_scala.scala",
        "decorated-field.ts",
        "taint_assign_record1.yaml",
        "cp_private_class_attr2.java",
        "option_xml_attr_implicit_ellipsis.yaml",
        "sym_prop_record.js",
        "anywhere_global.yaml",
        "metavar_type_multi_types_cpp.yaml",
        "metavar_type_not_kotlin.yaml",
        "persistent_metavariable_pattern.yaml",
        "entropy_python.py",
        "julia_let_taint.yaml",
        "labeled_propagators.yaml",
        "generic_multilines.yaml",
        "metavar_type_not_rust.rs",
        "cp_private_class_attr3.java",
        "metavariable_pattern_recursive_def.js",
        "metavariable_pattern_keep_env.yaml",
        "metavar_type_simple_cpp.cpp",
        "metavar_type_non_prim_php.yaml",
        "metavariable_object_type.yaml",
        "taint_assign_cleans_shape.yaml",
        "taint_labels_empty.yaml",
        "sym_prop_non_literal.yaml",
        "metavar_pattern_lang.py",
        "metavar_pattern_generic_gibberish.yaml",
        "string_in_comparison.py",
        "taint_splat.yaml",
        "record_one_spread.yaml",
        "taint_ruby_hash_elem_ref.yaml",
        "taint_decl_in_if_cond.cpp",
        "rust_macro_token_args.yaml",
        "taint_assume_safe_numbers1.yaml",
        "taint_ruby_hash_elem_ref.rb",
        "terraform_nested_yaml.yaml",
        "rule_extensions.yaml",
        "metavar_regex_id.js",
        "metavar_pattern_open_redirect.py",
        "metavar_comparison_bitand.java",
        "taint_typestate1.yaml",
        "option_xml_children_ordered.xml",
        "pow_metavar_comparison.yaml",
        "taint_sanitizer_var.py",
        "pattern_regex_inside.yaml",
        "taint_param_default1.py",
        "pow_metavar_comparison.py",
        "taint_field_sensitive4.yaml",
        "tainted_pattern_lval.rs",
        "taint_best_fit_sink5.yaml",
        "focus_metavariable.py",
        "taint_assume_safe_booleans.yaml",
        "taint_lambda.yaml",
        "sym_prop_redundancy.py",
        "taint_labels1.py",
        "taint_cpp_for_each.yaml",
        "sym_prop_decorator.py",
        "xml_metavar_comp2.xml",
        "cp_subtraction1.yaml",
        "strict_metavar_name_binding.js",
        "TODO_taint_messy_sink.php",
        "metavar_regex_include.php",
        "taint_obj_fields.kt",
        "taint_assume_safe_indexes.py",
        "taint_object_funcdef_1.ts",
        "vardef_assign_true.yaml",
        "metavar_pattern_nested.yaml",
        "taint_clean_in_try_no_finally.yaml",
        "record_field_ellipsis.yaml",
        "metavariable_pattern_either_unif.js",
        "regexp_capture_groups.yaml",
        "parse_pattern_as_stmt.yaml",
        "taint_iterator_values.yaml",
        "yaml_on_yaml.test.yaml",
        "pattern_move_standalone_mod_member.yaml",
        "taint_assume_safe_numbers3.java",
        "taint_no_builtin_props2.yaml",
        "taint_typestate2.cpp",
        "struct_tags.yaml",
        "taint_typestate3.cpp",
        "taint_get_set_sensitivity.yaml",
        "taint_source_var1.py",
        "metavar_pattern_lang1.yaml",
        "taint_non_exact_sink.py",
        "metavar_regex_scope.yaml",
        "taint_match_on_source.yaml",
        "metavar_regex_and.js",
        "record_spread_ellipsis.js",
        "capture_group_unification.yaml",
        "not_found_exn2.py",
        "taint_assign_record2.js",
        "taint_param_source.yaml",
        "decorated_match.yaml",
        "focus_metavariable2.yaml",
        "metavar_type_not_rust.yaml",
        "taint_object_funcdef_1.yaml",
        "vardef_assign_true2.yaml",
        "taint_field_sensitive8.yaml",
        "taint_labels5.py",
        "cp_private_class_attr1.yaml",
        "metavar_call_case_insensitive.php",
        "anywhere_metavar.yaml",
        "pattern-x-2.yaml",
        "typed_metavar_metavar_regex.go",
        "metavar_name_imported_entity_java.java",
        "taint_best_fit_sink9.yaml",
        "df_scala_expr_block.yaml",
        "regex_capture_groups.yaml",
        "regexp_multiline_mode.yaml",
        "negation_exact.yaml",
        "taint_best_fit_sink2.yaml",
        "taint_control.yaml",
        "tainted_pattern_lval.yaml",
        "metavar_pattern_regex4.js",
        "xml_metavar_comp2.yaml",
        "taint_field_sensitive3.yaml",
        "taint_best_fit_sink.yaml",
        "taint_lambda.js",
        "taint_return_expr.scala",
        "record_one_field.js",
        "spacegrep_metavarbug.dockerfile",
        "pattern-x-bug.yaml",
        "taint_not_conflicting_sanitizer.yaml",
        "metavar_type_str_eq_python.yaml",
        "taint_propagator_lambda2.yaml",
        "taint_best_fit_sink10.yaml",
        "metavar_pattern_regex.yaml",
        "taint_propagator_by_side_effect_false1.yaml",
        "quotes.yaml",
        "taint_param_source2.ts",
        "taint_param_source2.yaml",
        "taint_unify_mvars.yaml",
        "taint_labels.py",
        "cp_private_class_attr.java",
        "option_xml_singleton.js",
        "pattern-x-4.py",
        "taint_no_builtin_props3.cpp",
        "metavariable_name_resolution.java",
        "metavar_ellipsis_xmls.yaml",
        "taint_source_var1.yaml",
        "metavar_pattern_nested1.py",
        "taint_propagator1.js",
        "sym_prop_lhs_exp.yaml",
        "taint_foreach.java",
        "taint_if_cond_sink.yaml",
        "persistent_metavariable_pattern2.py",
        "metavar_pattern_regex2.yaml",
        "js_constructor_naming.yaml",
        "cp_subtraction1.go",
        "naming_class_attribute.yaml",
        "taint_typestate1.py",
        "no_strict_metavar_name_binding.yaml",
        "taint_propagator_by_side_effect_false1.php",
        "placement_new_cpp.yaml",
        "sym_prop_exp.js",
        "taint_wo_side_effects.yaml",
        "option_xml_attr_implicit_ellipsis.js",
        "for_in_comprehension_metavar.yaml",
        "taint_exact_sanitizer.py",
        "deep_expr_xml.yaml",
        "sym_prop_new.java",
        "inside_test.yaml",
        "sym_prop_lambda.yaml",
        "taint_field_sensitive4.js",
        "misc_field.yaml",
        "taint_propagator.py",
        "string_in_comparison.yaml",
        "sym_prop_open_redirect.py",
        "ellipsis_stmts_deep1.ts",
        "taint_imported_func.py",
        "date_comparison.yaml",
        "taint_flask.yaml",
        "taint_safe_comparisons.py",
        "taint_best_fit_sink4.php",
        "metavar_unification.json",
        "js_bracket.yaml",
        "pattern-regex.py",
        "bitwise_metavar_compare.yaml",
        "js_constructor_naming.js",
        "non_irrelevant_rule.java",
        "decorated-field.yaml",
        "taint_exact_sources.yaml",
        "taint_this1.java",
        "terraform_coercions.yaml",
        "int_binop.go",
        "sym_prop_merge1.yaml",
        "no_fatal_error_with_xxx_equal.js",
        "metavar_comparison_bitor.java",
        "metavar_type_not_java.java",
        "kotlin_slow_import.kt",
        "labeled_propagators.py",
        "metavar_regex_scope3.py",
        "unicode_string.py",
        "taint_get_set_sensitivity1.java",
        "taint_labels7.yaml",
        "taint_control.py",
        "severity_critical.py",
        "taint_lambda2.yaml",
        "taint_spread_record_big.yaml",
        "taint_assign_record.yaml",
        "eval_not_in.py",
        "terraform_block_sink.yaml",
        "taint_lambda_cpp.yaml",
        "anywhere_global.py",
        "taint_typestate.py",
        "metavar_pattern_regex1.js",
        "metavar_pattern_dots_mvar.yaml",
        "taint_exact_sources.py",
        "taint_splat.py",
        "pattern-either-one-general.py",
        "taint_lambda3.yaml",
        "c_array_inits.c",
        "taint_final_globals2.yaml",
        "taint_by_side_effect_lhs.py",
        "taint_flask.py",
        "metavar_type_str_eq_java.yaml",
        "taint_labels6.yaml",
        "taint_not_conflicting_sanitizer.php",
        "ellipsis_stmts_deep1.yaml",
        "julia_type_parameter.yaml",
        "taint_wo_side_effects1.php",
        "record_empty.js",
        "taint_propagator_by_side_effect_false.yaml",
        "taint_assign_cleans_shape.js",
        "taint_best_fit_sink1.php",
        "assign_in_cond_expr_cpp.cpp",
        "taint_implicit_return.rs",
        "taint_propagator1.yaml",
        "taint_cpp_ptr_field.cpp",
        "metavar_name_imported_entity_js.yaml",
        "taint_assume_safe_funcs.php",
        "sym_prop_exp_no_propagate.js",
        "terraform_mvar_regex_interpolated_var.tf",
        "pattern-x-1.py",
        "metavar_comparison_constness.yaml",
        "cp_relevant_rule.yaml",
        "vardef_assign_true.js",
        "taint_obj_fields.yaml",
        "metavar_regex_scope2.py",
        "taint_nested_record_pattern.yaml",
        "taint_propagator.yaml",
        "numeric_regex_capture_groups.yaml",
        "option_attr_expr_true.py",
        "metavar_pattern_lang1.py",
        "misc_name_and_neg.java",
        "pattern-x-4.yaml",
        "taint_not_conflicting_sanitizer1.php",
        "metavar_type_not_csharp.cs",
        "sym_prop_decorator.yaml",
        "mvar_regex_interpolated_var.py",
        "metavar_regex_scope.py",
        "pattern-x.yaml",
        "metavariable_pattern_keep_env.js",
        "anywhere_metavar.py",
        "swift_lambda_taint.yaml",
        "sym_prop_exp_no_propagate.yaml",
        "taint_exception.yaml",
        "vardef_assign_false.js",
        "tainted-filename.php",
        "string_mvar_julia.yaml",
        "taint_react.js",
        "numeric_regex_capture_groups.py",
        "regex_capture_groups.py",
        "focus_metavariable1.py",
        "taint_array.yaml",
        "taint_cpp_ptr_field1.yaml",
        "metavar_pattern_regex3.yaml",
        "cp_python_and_or.yaml",
        "metavar_comparison_constness1.yaml",
        "taint_wo_side_effects2.php",
        "taint_ruby_concat.yaml",
        "metavar_pattern_lang.yaml",
        "pattern-inside-range.yaml",
        "ellipsis_metavar_extended_match.yaml",
        "anonymous_metavar.py",
        "cp_lambda.yaml",
        "taint_field_sensitive1.js",
        "metavar_unification.yaml",
        "taint_param_pattern.rs",
        "taint_wo_side_effects2.yaml",
        "metavar_call_case_insensitive.yaml",
        "taint_final_globals1.js",
        "taint_param_source3.yaml",
        "taint_param_default.yaml",
        "sym_prop_merge2.java",
        "taint_foreach1.yaml",
        "quotes.test.yaml",
        "inside_test.go",
        "taint_assign_record1.ts",
        "metavar_pattern_nested1.yaml",
        "metavar_pattern_open_redirect.yaml",
        "taint-general-source-sink.yaml",
        "metavar_comparison_bitnot.java",
        "prometheus_long_duration_promql.test.yaml",
        "struct_tags.go",
        "placement_new_cpp.cpp",
        "sym_prop_deep.yaml",
        "taint_lambda1.java",
        "metavar_pattern_either.yaml",
        "taint_assume_safe_indexes.yaml",
        "taint_field_sensitive2.yaml",
        "taint_best_fit_sink3.yaml",
        "ts_decorated_static_property.ts",
        "metavar_comparison_constness1.py",
        "sym_prop_no_merge.yaml",
        "taint_propagator_lambda.yaml",
        "taint_single_variable_source.js",
        "pattern_move_let_bind.yaml",
        "typed_metavar_metavar_regex.yaml",
        "kotlin_slow_import.yaml",
        "metavar_pattern_generic.js",
        "record_empty.yaml",
        "decorated_match.py",
        "metavar_call.php",
        "cpp_array_inits.cpp",
        "metavar_pattern_regex2.js",
        "misc_php_new.yaml",
        "not_found_exn.go",
        "taint_labels_rec.yaml",
        "focus_metavariable.yaml",
        "sym_prop_new.yaml",
        "taint_rust_returns.yaml",
        "option_symmetric_eq.yaml",
        "taint_spread_record_small.yaml",
        "taint_nested_record_pattern.js",
        "sym_prop_python_with1.py",
        "taint_labels_empty.go",
        "taint_wo_side_effects1.yaml",
        "redos_python.yaml",
        "assign_in_cond_expr_cpp.yaml",
        "not_found_exn.yaml",
        "taint_param_source.py",
        "taint_field_sensitive8.py",
        "non_irrelevant_rule.yaml",
        "option_attr_expr_false.py",
        "sym_prop_merge1.java",
        "taint_this1.yaml",
        "pattern-x-2.py",
        "cp_relevant_rule.js",
        "metavar_type_not_java.yaml",
        "taint_typestate4.yaml",
        "metavar_comparison_bitor.yaml",
        "taint_get_set_sensitivity1.yaml",
        "taint_sanitizer_var.yaml",
        "terraform_mvar_regex_interpolated_var.yaml",
        "js_no_ts.yaml",
        "metavar_type_not_typescript.yaml",
        "pattern-x-bug.py",
        "taint_field_sensitive1.yaml",
        "metavariable_object_type.ts",
        "python_fstring_ellipsis.yaml",
        "taint_object_funcdef.js",
        "pattern_regex_inside.py",
        "ctor_cpp.yaml",
        "misc_macro_call.yaml",
        "metavar_pattern_not.yaml",
        "metavar_pattern_fake_toks.yaml",
        "taint_final_globals1.yaml",
        "misc_macro_call.rs",
        "taint_labels5.yaml",
        "taint_param_default1.yaml",
        "taint_lambda4.ts",
        "taint_ruby_if_expr.rb",
        "df_scala_expr_block.scala",
        "focus_metavariable2.py",
        "taint_field_sensitive2.js",
        "cp_private_class_attr.yaml",
        "metavar_pattern_name.yaml",
        "taint_best_fit_sink.py",
        "pattern_move_struct_member.yaml",
        "metavariable_name_resolution.yaml",
        "pattern_not_regex1.yaml",
        "option_attr_expr_true.yaml",
        "taint_propagator2.yaml",
        "julia_typed_mvar.yaml",
        "metavar_comparison_constness.c",
        "resolved_metavariables.yaml",
        "deep_expr_xml.js",
        "taint_foreach.yaml",
        "metavar_template_type_arg.cpp",
        "prim_obj_init_cpp.cpp",
        "parse_pattern_as_stmt.ts",
        "metavar_pattern_dots_mvar.py",
        "metavar_type_func_param_go.yaml",
        "taint_best_fit_sink7.js",
        "not_found_exn2.yaml",
        "cpp_array_inits.yaml",
        "naming_class_attribute.java",
        "metavar_type_not_csharp.yaml",
        "taint_propagator_by_side_effect_false.php",
        "metavar_ellipsis_xmls.html",
        "sym_prop_python_with1.yaml",
        "record_any.js",
        "unicode_string.yaml",
        "metavar_ellipsis_args_empty.yaml",
        "metavar_regex_scope4.yaml",
        "taint_wo_side_effects.php",
        "taint_react.yaml",
        "rust_macro_token_args.rs",
        "sym_prop_chain.yaml",
        "taint_decl_in_while_cond.cpp",
        "taint_best_fit_sink8.py",
        "metavar_pattern_generic_gibberish.js",
        "option_implicit_exprstmt.yaml",
        "macro_arg_taint.yaml",
        "sym_prop_merge.py",
        "metavar_pattern_name.js",
        "taint_exception.py",
        "metavar_pattern_fake_toks.php",
        "anywhere_include.c",
        "sym_prop_lhs_exp.py",
        "prometheus_long_duration_promql.yaml",
        "metavar_type_not_kotlin.kt",
        "record_any.yaml",
        "taint_propagator3.yaml",
        "taint_field_sensitive5.php",
        "taint_field_sensitive3.js",
        "sym_prop_redundancy.yaml",
        "taint_no_builtin_props.yaml",
        "pattern_int.yaml",
        "neg_op_lit_equiv.yaml",
        "metavar_regex_scope4.py",
        "option_symmetric_eq.php",
        "top_level_sym_prop.yaml",
        "inception.yaml",
        "ellipsis_metavar_extended_match.py",
        "metavar_type_str_eq_php.php",
        "sym_prop_merge2.yaml",
        "sym_prop_record.yaml",
        "taint_non_exact_sink.yaml",
        "metavar_comparison_bitnot.yaml",
        "taint_basic.py",
        "taint_labels4.yaml",
        "metavar_type_func_param_julia.yaml",
        "taint_iterator_values.js",
        "macro_arg_taint.rs",
        "taint_propagator_lambda2.js",
        "taint_assume_safe_booleans.py",
        "option_implicit_exprstmt.dockerfile",
        "metavar_type_decorator_python.yaml",
        "c_array_inits.yaml",
        "taint_lambda1.yaml",
        "sym_prop_deep.java",
        "taint_imported_func.yaml",
        "record_one_field.yaml",
        "python_fstring_ellipsis.py",
        "rule_extensions.py",
        "metavar_type_simple_move_on_aptos.yaml",
        "ellipsis_in_case.go",
        "sym_prop_no_cycle1.yaml",
        "cast_symbol_prop.go",
        "metavar_type_func_param_go.go",
        "redos_python.py",
        "top_level_sym_prop.py",
        "taint_propagator_lambda.java",
        "taint_best_fit_sink1.yaml",
        "metavar_pattern_regex3.js",
        "metavar_pattern_fake_toks1.yaml",
        "as_metavariable2.py",
        "taint_final_globals2.java",
        "taint_object_funcdef.yaml",
        "metavar_type_str_eq_java.java",
        "metavar_pattern_old_tls_versions.yaml",
        "taint_return_expr_fn_sink.scala",
        "pattern-regex.yaml",
        "taint_propagator_lambda1.yaml",
        "taint_foreach1.scala",
        "taint_typestate5.yaml",
        "record_mixed.js",
        "sym_prop_react.yaml",
        "int_binop.yaml",
        "inception2.yaml",
        "taint_this.yaml",
        "misc_field.js",
        "taint_ruby_if_expr.yaml",
        "not-under-inside.yaml",
        "no_fatal_error_with_xxx_equal.yaml",
        "taint_param_source1.yaml",
        "and_inside.yaml",
        "taint_return_expr.yaml",
        "pattern-x-3.py",
        "metavar_pattern_regex1.yaml",
        "metavar_pattern_fake_toks1.php",
        "yaml_metavariable_pattern.test.yaml",
        "metavar_name_imported_entity_js.js",
        "sym_prop_lambda.py",
        "taint_safe_comparisons.yaml",
        "taint_source_var.yaml",
        "taint_object_destructure.yaml",
        "misc_name_and_neg.yaml",
        "pattern_move_func_signature.yaml",
        "sym_prop_string_eq.py",
        "misc_php_new_taint.php",
        "kotlin_named_ellipsis.yaml",
        "metavar_pattern_either.js",
        "sym_prop_open_redirect.yaml",
        "misc_eval_nothandle.yaml",
        "taint_lambda3.js",
        "different_binding_locations.yaml",
        "metavar_type_not_scala.yaml",
        "metavar_type_multi_types_cpp.cpp",
        "neg_op_lit_equiv.c",
        "taint_propagator3.py",
        "negation_exact.js",
        "pattern_not_regex.html",
        "sym_prop_explosion.js",
        "taint_labels3.yaml",
        "taint_decl_in_if_cond.yaml",
        "taint_clean_in_try_no_finally.py",
        "tainted-filename.yaml",
        "taint_assume_safe_booleans1.java",
        "whole_file.tf",
        "metavar_type_non_prim_php.php",
        "generic_dots_mvar.yaml",
        "tainted-file-path.yaml",
        "misc_var_is_var.yaml",
        "taint_spread_record_small.js",
        "metavar_comparison_bitxor.yaml",
        "taint_no_builtin_props1.yaml",
        "string_vs_char_ptr_cpp.yaml",
        "metavar_type_decorator_python.py",
        "redos_bracket_colon.js",
        "metavar_pattern_not.py",
        "typed_metavar_not_rust.yaml",
        "metavar_pattern_lang2.yaml",
        "metavar_regex_capture.py",
        "taint_unify_mvars.js",
        "taint_propagator4.yaml",
        "metavar_comparison_str.yaml",
        "misc_eval_nothandle.py",
        "sym_prop_no_merge1.go",
        "typed_metavar_not.java",
        "resolved_metavariables.js",
        "redos_bracket_colon.yaml",
        "cp_mults.yaml",
        "record_spread_ellipsis.yaml",
        "focus_metavariable1.yaml",
        "taint_object_destructure.js",
        "python_fstring_eval.py",
        "vardef_assign_true1.yaml",
        "severity_critical.yaml",
        "cp_private_class_attr2.yaml",
        "taint_labels2.py",
        "propagator_labels.py",
        "pattern-x-1.yaml",
        "taint_cpp_for_each.cpp",
        "metavar_type_simple_c.yaml",
        "metavar_regex_scope2.yaml",
        "defer-persistent-binding.py",
        "ts_decorated_async_property.yaml",
        "taint_spread_record_big.js",
        "taint_rust_returns.rs",
        "attributes_match_multiple.php",
        "taint_assume_safe_numbers2.php",
        "ctor_cpp.cpp",
        "entropy_python.yaml",
        "decorated_field_pattern.yaml",
        "ellipsis_in_case.yaml",
        "metavar_type_simple_c.c",
        "taint_best_fit_sink3.py",
        "cp_subtraction.go",
        "metavar_type_not_go.yaml",
        "anywhere_include.yaml",
        "taint_param_source3.js",
        "taint_typestate.yaml",
        "taint_final_globals.yaml",
        "taint_assume_safe_numbers2.yaml",
        "misc_php_new.php",
        "sym_prop_non_constant_exp.yaml",
        "option_xml_singleton.yaml",
        "metavar_regex_and.yaml",
        "taint_async.yaml",
        "no_strict_metavar_name_binding.js",
        "metavar_regex_capture.yaml",
        "sym_prop_class_attr.java",
        "taint_implicit_return.yaml",
        "regexp_capture_empty_group.yaml",
        "taint_typestate2.yaml",
        "sym_prop_no_cycle.yaml",
        "taint_assume_safe_numbers.py",
        "taint_labels6.py",
        "terraform_coercions.tf",
        "ellipsis_metavar_template.js",
        "cp_python_and_or.py",
        "record_mixed.yaml",
        "taint_field_sensitive7.yaml",
        "option_attr_expr_true1.yaml",
        "as_metavariable2.yaml",
        "cp_lambda.cpp",
        "terraform_nested_yaml.tf",
        "sym_prop_string_eq.yaml",
        "taint_union_mvars.yaml",
        "taint_best_fit_sink6.yaml",
        "taint_field_sensitive6.py",
        "taint_basic.yaml",
        "metavar_regex_id.yaml",
        "misc_deep_metavar.ts",
        "taint_expr_in_type_labels.yaml",
        "python_fstring_eval.yaml",
        "taint_expr_in_type_labels.cpp",
        "metavar_template_type_arg.yaml",
        "taint_assign_record.ts",
        "taint_best_fit_sink7.yaml",
        "taint_field_sensitive6.yaml",
        "sym_prop_non_constant_exp.js",
        "taint_best_fit_sink2.py",
        "taint_typestate3.yaml",
        "option_attr_expr_true1.py",
        "regression_uniq_or_ellipsis.go",
        "taint_union_mvars.js",
        "taint_if_cond_sink.c",
        "sym_prop_no_cycle1.js",
        "option_attr_expr_false.yaml",
        "compare-exposed-port.yaml",
        "taint_expr_in_type.cpp",
        "taint-general-source-sink.js",
        "persistent_metavariable_pattern.py",
        "taint_assume_safe_numbers3.yaml",
        "taint_labels_rec.rs",
        "taint_assume_safe_numbers.yaml",
        "taint_array.py",
        "option_fielddef_assign_arrow.js",
        "taint_not_conflicting_sanitizer1.yaml",
        "taint_get_set_sensitivity.java",
        "cp_subtraction.yaml",
        "taint_source_var.py",
        "relevant_rule_badutf8.js",
        "metavar_comparison_str.go",
        "metavar_type_str_eq_python.py",
        "cp_mults.py",
        "taint_best_fit_sink10.js",
        "taint_labels7.py",
        "TEMPLATE.js",
        "cp_python_strings.py",
        "terraform_metavariable.yaml",
        "js_bracket.js",
        "option_xml_children_ordered.yaml",
        "taint_assign_record2.yaml",
        "relevant_rule_badutf8.yaml",
        "cp_private_class_attr1.java",
        "metavariable_pattern_recursive_def.yaml",
        "option_ac_matching.php",
        "yaml_metavariable_pattern.yaml",
        "metavar_name_imported_entity_java.yaml",
        "taint_field_sensitive7.py",
        "sym_prop_python_with.yaml",
        "taint_best_fit_sink9.java",
        "sym_prop_merge.yaml",
        "record_one_spread.js",
        "taint_single_variable_source.yaml",
        "settings.js",
        "taint_labels.yaml",
        "date_comparison.py",
        "taint_param_default.py",
        "metavar_pattern_old_tls_versions.js",
        "generic_ignore_comments.yaml",
        "metavar_regex_scope3.yaml",
        "metavar_call.yaml",
        "taint_lambda2.js",
        "cast_symbol_prop.yaml",
        "misc_terraform1.tf",
        "cp_private_class_attr3.yaml",
        "taint_propagator2.py",
        "record_field_ellipsis.js",
        "sym_prop_no_merge1.yaml",
        "generic_single_line_ellipsis.yaml",
        "mvar_regex_interpolated_var.yaml",
        "misc_terraform1.yaml",
        "sym_prop_non_literal.java",
        "vardef_assign_false.yaml",
        "compare-exposed-port.dockerfile",
        "sym_prop_no_merge.py",
        "inside.yaml",
        "taint_exact_sanitizer.yaml",
        "cp_python_strings.yaml",
        "ts_decorated_async_property.ts",
        "metavar_type_not_typescript.ts",
        "taint_cpp_ptr_field1.cpp",
        "strict_metavar_name_binding.yaml",
        "taint_no_builtin_props.py",
        "vardef_assign_false1.yaml",
        "taint_assume_safe_numbers1.java",
        "ellipsis_stmts_deep.yaml",
        "string_vs_char_ptr_cpp.cpp",
        "taint_no_builtin_props2.py",
        "taint_ruby_concat.rb",
        "metavar_comparison_bitand.yaml",
        "pattern-inside-range.py",
        "metavar_ellipsis_args_empty.rb",
        "persistent_metavariable_pattern2.yaml",
        "sym_prop_no_cycle.py",
        "taint_labels2.yaml",
        "option_fielddef_assign_arrow.yaml",
        "not-under-inside.py",
        "vardef_assign_true2.js",
        "taint_by_side_effect_lhs.yaml",
        "taint_match_on_source.py",
        "taint_async.py",
        "taint_labels3.py",
        "metavar_type_simple_cpp.yaml",
        "sym_prop_chain.py",
        "sym_prop_react.js",
        "terraform_block_sink.tf",
        "taint_unsafe_block.rs",
        "taint_best_fit_sink5.java",
        "misc_var_is_var.js",
        "different_binding_locations.py"
      ],
      "yaml_count": 411,
      "target_count": 786
    },
    "osemgrep": {
      "yaml_files": [
        "osemgrep.yml"
      ],
      "target_files": [
        "osemgrep.yml"
      ],
      "yaml_count": 1,
      "target_count": 1
    },
    "eval": {
      "yaml_files": [],
      "target_files": [
        "duration2.json",
        "modulo_expr.json",
        "regexp.json",
        "regexp2.json",
        "in_list.json",
        "regexp3.json",
        "float.json",
        "simple_expr.json",
        "duration1.json",
        "mixed_int_and_float.json"
      ],
      "yaml_count": 0,
      "target_count": 10
    },
    "ls/ci": {
      "yaml_files": [],
      "target_files": [
        "rule_conf_resp.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "errors": {
      "yaml_files": [
        "unknown_metavariable2.yaml",
        "bad_language.yaml",
        "unsatisfiable_formula.yaml",
        "bad_indentation.yaml",
        "bad_severity.yaml",
        "unknown_metavariable.yaml",
        "bad_regexp.yaml",
        "missing_id.yaml",
        "rules_recovery.yaml",
        "ignored_metavar_regex.yaml",
        "only_negative_terms.yaml",
        "pattern_where_python_deprecated.yaml",
        "empty_languages.yaml"
      ],
      "target_files": [
        "unknown_metavariable2.yaml",
        "bad_language.yaml",
        "unsatisfiable_formula.yaml",
        "bad_indentation.yaml",
        "bad_severity.yaml",
        "unknown_metavariable.yaml",
        "bad_regexp.yaml",
        "missing_id.yaml",
        "rules_recovery.yaml",
        "ignored_metavar_regex.yaml",
        "only_negative_terms.yaml",
        "pattern_where_python_deprecated.yaml",
        "empty_languages.yaml"
      ],
      "yaml_count": 13,
      "target_count": 13
    },
    "parsing/terraform": {
      "yaml_files": [],
      "target_files": [
        "simple.tf"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "parsing/go": {
      "yaml_files": [],
      "target_files": [
        "if_header_type.go",
        "test_unicode.go",
        "unicode_rune.go",
        "multi_line_raw_string.go",
        "generics_qualified.go",
        "string.go"
      ],
      "yaml_count": 0,
      "target_count": 6
    },
    "parsing/python": {
      "yaml_files": [],
      "target_files": [
        "field.py",
        "pattern_matching.py",
        "tuple_expansion.py",
        "dict_structural pattern.py",
        "as_pattern.py",
        "re.py"
      ],
      "yaml_count": 0,
      "target_count": 6
    },
    "parsing/js": {
      "yaml_files": [],
      "target_files": [
        "jsx.js",
        "import.js",
        "cp_assign_record_assign.js",
        "require.js",
        "html-comment.js"
      ],
      "yaml_count": 0,
      "target_count": 5
    },
    "parsing/dockerfile": {
      "yaml_files": [],
      "target_files": [
        "user.dockerfile",
        "no-trailing-newline-segfault.dockerfile",
        "no-trailing-newline.dockerfile",
        "semgrep.dockerfile",
        "numeric-user.dockerfile"
      ],
      "yaml_count": 0,
      "target_count": 5
    },
    "parsing/rust": {
      "yaml_files": [],
      "target_files": [
        "literals.rs",
        "types.rs",
        "inner_attr_stmt.rs",
        "expressions.rs",
        "patterns.rs",
        "hello_world.rs",
        "declarations.rs",
        "async.rs",
        "macros.rs",
        "source_files.rs"
      ],
      "yaml_count": 0,
      "target_count": 10
    },
    "parsing/java": {
      "yaml_files": [],
      "target_files": [
        "generics0.java",
        "accent.java",
        "annotGeneric.java",
        "generics1.java",
        "this.java",
        "textblocks.java",
        "enumArgsAndBody.java",
        "annot_interface.java",
        "generics4.java",
        "this2.java",
        "this_implicit.java",
        "annotStmt.java",
        "field.java",
        "println.java",
        "record.java",
        "generics2.java",
        "generics3.java",
        "annot_interface2.java",
        "simple_addition.java"
      ],
      "yaml_count": 0,
      "target_count": 19
    },
    "parsing/html": {
      "yaml_files": [],
      "target_files": [
        "hello.html"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "parsing/kotlin": {
      "yaml_files": [],
      "target_files": [
        "prim-expr.kt",
        "hello-world.kt",
        "small-program.kt",
        "binary-func.kt",
        "generics.kt",
        "string.kt",
        "enum.kt",
        "navigation.kt",
        "unary.kt",
        "parent_with_args.kt",
        "class_newline.kt",
        "types.kt",
        "eldritch.kt"
      ],
      "yaml_count": 0,
      "target_count": 13
    },
    "parsing/php": {
      "yaml_files": [],
      "target_files": [
        "misc_for_method.php",
        "match_expression.php",
        "class.php",
        "parameter_type_qualified.php",
        "attributes.php",
        "enum.php",
        "named_arguments.php",
        "arrow.php",
        "attributes_qualified2.php",
        "catch_or.php",
        "foreach_destructure_empty_comma.php",
        "union_types.php",
        "unicode_method.php",
        "union_types2.php",
        "attributes_qualified.php"
      ],
      "yaml_count": 0,
      "target_count": 15
    },
    "parsing/xml": {
      "yaml_files": [],
      "target_files": [
        "book.xml",
        "note.xml",
        "xsschema.xml",
        "pom.xml"
      ],
      "yaml_count": 0,
      "target_count": 4
    },
    "parsing/json": {
      "yaml_files": [],
      "target_files": [
        "simple.json"
      ],
      "yaml_count": 0,
      "target_count": 1
    },
    "parsing/scala": {
      "yaml_files": [],
      "target_files": [
        "indented_package.scala",
        "indented_match.scala",
        "indented_tuple_for_pattern.scala",
        "using_args.scala",
        "splatted_args.scala",
        "indented_while.scala",
        "optional_brace_weird_space.scala",
        "pat_typed_in_class.scala",
        "indented_for_body.scala",
        "given_defs.scala",
        "end_markers.scala",
        "function_types.scala",
        "indented_block_expr_rhs.scala",
        "newline_in_for.scala",
        "enums.scala",
        "optional_brace_class.scala",
        "starred_arrow_param_type.scala",
        "extensions.scala",
        "imports.scala",
        "opaque.scala",
        "optional_brace_object.scala",
        "if_expr.scala",
        "exports.scala",
        "quoted.scala",
        "for_exprs.scala",
        "expr_case_clause.scala",
        "fun_dcl.scala",
        "using_clauses.scala",
        "anonymous_types.scala",
        "interpolated_string_no_dedent.scala",
        "generator_guards.scala",
        "while_expr.scala",
        "type_case_clauses.scala",
        "soft_keywords.scala",
        "soft_modifiers.scala",
        "match_type.scala",
        "tyrefined.scala"
      ],
      "yaml_count": 0,
      "target_count": 37
    },
    "parsing/cpp": {
      "yaml_files": [],
      "target_files": [
        "char.cpp",
        "operator_templated3.cpp",
        "operator_templated2.cpp",
        "pointer_type_declarator_ident.cpp",
        "asm_stmt.cpp",
        "switch.cpp",
        "hello.cpp",
        "parenthesized_assignment.cpp",
        "operator_paren.cpp",
        "ambiguity_typedef.cpp",
        "class.cpp"
      ],
      "yaml_count": 0,
      "target_count": 11
    },
    "parsing/swift": {
      "yaml_files": [],
      "target_files": [
        "expressions.swift",
        "statements.swift",
        "hello-world.swift",
        "class-separator.swift",
        "switch_expr.swift",
        "optional-assignment.swift",
        "emoji.swift"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "parsing/csharp": {
      "yaml_files": [],
      "target_files": [
        "condaccess.cs",
        "events.cs",
        "range.cs",
        "operatoroverload.cs",
        "typeconstraints.cs",
        "implicit_typing.cs",
        "using.cs",
        "namespace_file_level.cs",
        "with_expression.cs",
        "tuples.cs",
        "hello_world.cs",
        "localfunc.cs",
        "attributes.cs",
        "finalizer.cs",
        "goto.cs",
        "forloop.cs",
        "patternmatch.cs",
        "reserved.cs",
        "unchecked.cs",
        "async.cs",
        "linq.cs",
        "strings.cs",
        "defaultoperator.cs",
        "object_initializer.cs",
        "foreach.cs",
        "unsafe.cs",
        "makeref.cs",
        "lock.cs",
        "extern_alias.cs",
        "indexer.cs",
        "exceptions.cs"
      ],
      "yaml_count": 0,
      "target_count": 31
    },
    "parsing/ts": {
      "yaml_files": [],
      "target_files": [
        "typeof.ts",
        "override.ts",
        "brace2.ts",
        "override_small.ts",
        "override_protected.ts",
        "is.ts",
        "brace1.ts",
        "override_type.ts",
        "keyof2.ts",
        "template_literal_types.ts",
        "keyof.ts",
        "abstract.ts"
      ],
      "yaml_count": 0,
      "target_count": 12
    },
    "parsing/c": {
      "yaml_files": [],
      "target_files": [
        "basic.c",
        "char.c",
        "asm_stmt.c"
      ],
      "yaml_count": 0,
      "target_count": 3
    },
    "parsing/ruby": {
      "yaml_files": [],
      "target_files": [
        "heredoc2.rb",
        "string.rb",
        "rational_float.rb",
        "dots_forwarding.rb",
        "heredoc.rb",
        "atom_kwd_trailing_comma.rb"
      ],
      "yaml_count": 0,
      "target_count": 6
    },
    "windows": {
      "yaml_files": [
        "rules.yml"
      ],
      "target_files": [
        "test.py",
        "rules.yml"
      ],
      "yaml_count": 1,
      "target_count": 2
    },
    "rule_formats": {
      "yaml_files": [
        "ok-rule-ids.yaml",
        "string_pattern.yaml",
        "new_syntax.yaml",
        "jwt-hardcode.yaml",
        "sca_version_no_space.yaml"
      ],
      "target_files": [
        "string_pattern.json",
        "ok-rule-ids.yaml",
        "string_pattern.yaml",
        "new_syntax.json",
        "jwt-hardcode.rb",
        "new_syntax.yaml",
        "new_syntax_basic.json",
        "jwt-hardcode.yaml",
        "sca_version_no_space.yaml"
      ],
      "yaml_count": 5,
      "target_count": 9
    },
    "perf": {
      "yaml_files": [
        "ajin2.yaml",
        "ajin2_semgrepcore.yaml",
        "timeout_gracefully.yaml",
        "ajin.yaml",
        "java.yml",
        "force_timeout.yaml"
      ],
      "target_files": [
        "l10000.py",
        "ajin2.yaml",
        "timeout.js",
        "l10000.js",
        "ajin2_semgrepcore.yaml",
        "timeout_gracefully.yaml",
        "ajin.yaml",
        "timeout.py",
        "three.js",
        "swagger-ui-bundle.js",
        "java.yml",
        "l1000.js",
        "l100.py",
        "my_first_calculator.py",
        "force_timeout.yaml",
        "l1000.py",
        "OS.java",
        "force_timeout.py",
        "timeout_gracefully.py",
        "l100.js"
      ],
      "yaml_count": 6,
      "target_count": 20
    },
    "perf/bloom": {
      "yaml_files": [
        "crlf-injection-rule1.yaml",
        "crlf-injection-logs.yaml"
      ],
      "target_files": [
        "ExampleErrorClass.java",
        "l10000.js",
        "crlf-injection-rule1.yaml",
        "crlf-injection-logs.yaml",
        "BadLogClass.java"
      ],
      "yaml_count": 2,
      "target_count": 5
    },
    "perf/benchmarking": {
      "yaml_files": [
        "netflix-slow-javascript.yml",
        "netflix-slow-python.yml"
      ],
      "target_files": [
        "netflix-slow-javascript.yml",
        "netflix-slow-python.yml"
      ],
      "yaml_count": 2,
      "target_count": 2
    },
    "parsing_todo/cpp": {
      "yaml_files": [],
      "target_files": [
        "semicolon.cpp",
        "expecting_init.cpp"
      ],
      "yaml_count": 0,
      "target_count": 2
    },
    "parsing_partial/cpp": {
      "yaml_files": [],
      "target_files": [
        "expecting_ident_param.cpp",
        "empty_case_body.cpp",
        "funcdef_without_params.cpp",
        "funcdef_without_params2.cpp",
        "saf-2016.cpp",
        "operator_templated.cpp",
        "operator_templated_partial.cpp"
      ],
      "yaml_count": 0,
      "target_count": 7
    },
    "login": {
      "yaml_files": [],
      "target_files": [
        "token_response.json",
        "fetch_body.json",
        "bad_response.json",
        "ok_response.json"
      ],
      "yaml_count": 0,
      "target_count": 4
    }
  }
}